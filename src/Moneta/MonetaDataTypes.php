<?php

// Warning! This code was generated by WSDL2PHP tool. 
// author: Filippov Andrey <afi.work@gmail.com> 
// see https://solo-framework-lib.googlecode.com 
// Timestamp: 1393412985 

namespace Moneta\Types;


/**
 * Список версий, который используется в MONETA.MerchantAPI.
	 * Если функциональность зависит от конкретной версии, то в описании запроса это будет указано дополнительно.
	 * Если версия не указана, то по умолчанию используется VERSION_1.
	 * The version enumeration which is used in MONETA.MerchantAPI.
	 * If functionality depends on certain version it will be described for each request type.
	 * VERSION_1 is considered by default.
	 * 
 */

class Version
{

	/**
	 * 
	 *
	 * @var string
	 */
	const VersionVERSION_1 = 'VERSION_1';

	/**
	 * 
	 *
	 * @var string
	 */
	const VersionVERSION_2 = 'VERSION_2';

}

/**
 * Тип, описывающий статусы операций в системе МОНЕТА.РУ.
	 * Данный тип может иметь только определенные значения, описанные ниже.
	 * Transaction status type in MONETA.RU.
	 * This type may have enumerated values.
	 * 
 */

class OperationStatus
{

	/**
	 * В обработке
	 * Transaction processing is in progress
	 * 
	 *
	 * @var string
	 */
	const INPROGRESS = 'INPROGRESS';

	/**
	 * Операция обработана
	 * Transaction processing completed successfully
	 * 
	 *
	 * @var string
	 */
	const SUCCEED = 'SUCCEED';

	/**
	 * Операция отменена
	 * Transaction processing is canceled
	 * 
	 *
	 * @var string
	 */
	const CANCELED = 'CANCELED';

	/**
	 * Средства зачислены на счет получателя. Уведомление по операции не отправлено (или не принято)
	 * Funds are credited to payee's account. External notification is not sent (or not accepted)
	 * 
	 *
	 * @var string
	 */
	const TAKENIN_NOTSENT = 'TAKENIN_NOTSENT';

	/**
	 * Операция создана
	 * Transaction is registered
	 * 
	 *
	 * @var string
	 */
	const CREATED = 'CREATED';

}

/**
 * 
 */

class OperationStatusState
{

	/**
	 * Средства списаны
	 * Debited
	 * 
	 *
	 * @var string
	 */
	const DEBITED = 'DEBITED';

	/**
	 * Средства зачислены
	 * Credited
	 * 
	 *
	 * @var string
	 */
	const CREDITED = 'CREDITED';

	/**
	 * Выполнено
	 * Completed
	 * 
	 *
	 * @var string
	 */
	const COMPLETED = 'COMPLETED';

	/**
	 * Заморожено
	 * Frozen
	 * 
	 *
	 * @var string
	 */
	const FROZEN = 'FROZEN';

	/**
	 * Отменено
	 * Cancelled
	 * 
	 *
	 * @var string
	 */
	const CANCELED = 'CANCELED';

}

/**
 * 
 */

class OperationAmountType
{

	/**
	 * Приход
	 * Income
	 * 
	 *
	 * @var string
	 */
	const INCOME = 'INCOME';

	/**
	 * Расход
	 * Expense
	 * 
	 *
	 * @var string
	 */
	const EXPENSE = 'EXPENSE';

}

/**
 * 
 */

class OperationTypeCategory
{

	/**
	 * Ввод средств
	 * Deposit
	 * 
	 *
	 * @var string
	 */
	const DEPOSIT = 'DEPOSIT';

	/**
	 * Вывод средств
	 * Withdrawal
	 * 
	 *
	 * @var string
	 */
	const WITHDRAWAL = 'WITHDRAWAL';

	/**
	 * Внутренний перевод
	 * Transfer
	 * 
	 *
	 * @var string
	 */
	const TRANSFER = 'TRANSFER';

	/**
	 * Товары и услуги
	 * Business
	 * 
	 *
	 * @var string
	 */
	const BUSINESS = 'BUSINESS';

}

/**
 * Тип, описывающий валюты, используемые в системе МОНЕТА.РУ.
	 * Данный тип может иметь только строго определенные значения, описанные ниже.
	 * Currency type in MONETA.RU.
	 * Must be one of values listed below.
	 * 
 */

class Currency
{

	/**
	 * 
	 *
	 * @var string
	 */
	const RUB = 'RUB';

	/**
	 * 
	 *
	 * @var string
	 */
	const USD = 'USD';

	/**
	 * 
	 *
	 * @var string
	 */
	const EUR = 'EUR';

	/**
	 * 
	 *
	 * @var string
	 */
	const GBP = 'GBP';

}

/**
 * Тип, описывающий статусы счетов в системе МОНЕТА.РУ.
	 * Счет может быть либо активным, либо заблокированным.
	 * Account status in MONETA.RU.
	 * May be either active or inactive.
	 * 
 */

class AccountStatus
{

	/**
	 * Активный счет
	 * Active account
	 * 
	 *
	 * @var int
	 */
	const AccountStatus1 = '1';

	/**
	 * Заблокированный счет
	 * Inactive (blocked) account
	 * 
	 *
	 * @var int
	 */
	const AccountStatus2 = '2';

	/**
	 * Закрытый счет
	 * Closed account
	 * 
	 *
	 * @var int
	 */
	const AccountStatus3 = '3';

}

/**
 * Типы счетов в системе МОНЕТА.РУ.
	 * Account types in MONETA.RU.
	 * 
 */

class AccountType
{

	/**
	 * Обычный счет
	 * Standard account
	 * 
	 *
	 * @var int
	 */
	const AccountType1 = '1';

	/**
	 * Расширенный счет
	 * Advanced account
	 * 
	 *
	 * @var int
	 */
	const AccountType2 = '2';

	/**
	 * Бонус-счет
	 * Bonus account
	 * 
	 *
	 * @var int
	 */
	const AccountType3 = '3';

	/**
	 * Займовый счет
	 * Loan account
	 * 
	 *
	 * @var int
	 */
	const AccountType4 = '4';

	/**
	 * Целевой счет
	 * Dedicated
	 * 
	 *
	 * @var int
	 */
	const AccountType5 = '5';

	/**
	 * Комиссионный счет
	 * Commission
	 * 
	 *
	 * @var int
	 */
	const AccountType6 = '6';

	/**
	 * Корпоративное средство платежа
	 * Entrprise account
	 * 
	 *
	 * @var int
	 */
	const AccountType7 = '7';

}

/**
 * Тип данных пользователя.
	 * User profile information type.
	 * 
 */

class ProfileType
{

	/**
	 * Тип данных "Организация". В данных такого типа присутствуют поля,
	 * характерные для организаций, например: "Название организации", "ФИО директора" и т.п.
	 * "Organization" profile type containing organization related information.
	 * 
	 *
	 * @var string
	 */
	const organization = 'organization';

	/**
	 * Тип данных "Клиент". В данных такого типа присутствуют поля,
	 * характерные для обычных пользователей, например: "фамилия", "имя", "отчество" и т.д.
	 * "Client" profile type containing person related information.
	 * 
	 *
	 * @var string
	 */
	const client = 'client';

}

/**
 * Типы документов, поддерживаемые в системе МОНЕТА.РУ.
	 * Document type supported in MONETA.RU.
	 * 
 */

class DocumentType
{

	/**
	 * Паспорт
	 * Civil passport
	 * 
	 *
	 * @var string
	 */
	const PASSPORT = 'PASSPORT';

	/**
	 * Водительское удостоверение
	 * User's driving licence
	 * 
	 *
	 * @var string
	 */
	const DRIVING_LICENCE = 'DRIVING_LICENCE';

	/**
	 * Военный билет
	 * Military ID
	 * 
	 *
	 * @var string
	 */
	const MILITARY_ID = 'MILITARY_ID';

	/**
	 * Другой документ
	 * Other document
	 * 
	 *
	 * @var string
	 */
	const OTHER = 'OTHER';

	/**
	 * 
	 *
	 * @var string
	 */
	const CUSTOM = 'CUSTOM';

}

/**
 * Базовый тип, содержащий атрибут "version".
	 * Base type containing "version" attribute.
	 * 
 */


class Entity
{
	
	/**
	 * 
	 *
	 * @var string
	 */
	 public $version = null;

}

/**
 * Тип, описывающий параметры операции в запросах.
	 * Transaction parameters type for requests.
	 * 
 */


class TransactionRequestType extends Entity
{
	
	/**
	 * Номер счета плательщика
	 * Payer account number
	 * 
	 *
	 * @var string
	 */
	 public $payer = null;

	/**
	 * Номер счета получателя
	 * Payee account number
	 * 
	 *
	 * @var string
	 */
	 public $payee = null;

	/**
	 * Сумма операции.
	 * Если флаг isPayerAmount отсутствует
	 * и пользователь имеет доступ только к счету плательщика,
	 * то интерпретируется как сумма к списанию (в валюте плательщика).
	 * Если флаг isPayerAmount отсутствует
	 * и пользователь имеет доступ только к счету получателя,
	 * то интерпретируется как сумма к зачислению (в валюте получателя).
	 * Transaction amount.
	 * If isPayerAmount is omitted
	 * and user has access only to payer account,
	 * then is interpreted as debit amount (in payer's currency).
	 * If isPayerAmount is omitted
	 * and user has access only to payee account,
	 * then is interpreted as credit amount (in payee's currency).
	 * 
	 *
	 * @var decimal
	 */
	 public $amount = null;

	/**
	 * Если пользователь имеет доступ как к счету плательщика, так и счету получателя,
	 * то флаг isPayerAmount обязателен.
	 * Если флаг isPayerAmount установлен (true), то amount используется как сумма к списанию (в валюте плательщика).
	 * Если флаг isPayerAmount сброшен (false), то amount используется как сумма к зачислению (в валюте получателя).
	 * If user has access to both accounts, then isPayerAmount flag is obligatory.
	 * If isPayerAmount flag is "true", then amount is used as debit amount (in payer's currency).
	 * If isPayerAmount flag is "false", then amount is used as credit amount (in payee's currency).
	 * 
	 *
	 * @var boolean
	 */
	 public $isPayerAmount = null;

	/**
	 * Платежный пароль счета плательщика
	 * Payment password for payer account
	 * 
	 *
	 * @var normalizedString
	 */
	 public $paymentPassword = null;

	/**
	 * Внешний номер операции
	 * External transaction ID
	 * 
	 *
	 * @var string
	 */
	 public $clientTransaction = null;

	/**
	 * Описание операции
	 * Transaction description or comments
	 * 
	 *
	 * @var normalizedString
	 */
	 public $description = null;

	/**
	 * Набор полей, которые необходимо сохранить в качестве атрибутов операции. Значения дат в формате dd.MM.yyyy HH:mm:ss
	 * Key-value pairs that will be saved as a transaction attributes. Use format dd.MM.yyyy HH:mm:ss for date values
	 * 
	 *
	 * @var OperationInfo
	 */
	 public $operationInfo = null;

	/**
	 * Запрос для платежного пароля
	 * Payment password challenge
	 * 
	 *
	 * @var string
	 */
	 public $paymentPasswordChallenge = null;

}

/**
 * Тип, описывающий параметры операции в запросах в пакетном режиме.
	 * Transaction parameters type for requests in batch processing mode.
	 * 
 */


class TransactionBatchRequestType extends Entity
{
	
	/**
	 * Флаг, указывающий выполнять ли все денежные переводы в одной транзакции.
	 * Если transactional = true, то:
	 * при возникновении ошибки все проведенные операции будут отменены
	 * можно проводить только операции со счетами монеты. Нельзя выводить деньги на внешние платежные системы.
	 * Если transactional = false, то:
	 * при возникновении ошибки все проведенные операции будут сохранены
	 * можно проводить любые операции, которые доступны в TransferRequest
	 * если выставить флаг exitOnFailure = false, то при возникновении ошибки можно пропустить операцию
	 * и продолжить выполнение операций дальше
	 * Joining all transfers in batch processing into one transaction.
	 * True -- all processed transfers will be rolled back on exceptions, no external transfers are allowed.
	 * False -- only current transfer rolled back on exceptions, external transfers are allowed.
	 * 
	 *
	 * @var boolean
	 */
	 public $transactional = null;

	/**
	 * Флаг, указывающий прерывать ли выполнение пакета операций, если произошла ошибка.
	 * Используется только при transactional = false
	 * Stops batch processing on exceptions. Used only in conjunction with transactional=false.
	 * 
	 *
	 * @var boolean
	 */
	 public $exitOnFailure = null;

	/**
	 * Набор операций, которые необходимо выполнить в одном пакете.
	 * Операции выполняются в том порядке, в котором они переданы в запросе.
	 * Set of transfers to be processed in one batch.
	 * Processed in order of appearance.
	 * 
	 *
	 * @var Entity
	 */
	 public $transaction = null;

	/**
	 * Набор операций, которые необходимо выполнить в одном пакете.
	 * Операции выполняются в том порядке, в котором они переданы в запросе.
	 * Set of transfers to be processed in one batch.
	 * Processed in order of appearance.
	 * 
	 *
	 * @param Entity
	 *
	 * @return void
	 */
	public function addTransaction(Entity $item)
	{
		$this->transaction[] = $item;
	}

}

/**
 * Тип, описывающий атрибуты операции в ответах.
	 * Transaction attributes type for responses.
	 * 
 */


class TransactionResponseType
{
	
	/**
	 * Текущий статус операции
	 * Current transaction status
	 * 
	 *
	 * @var string
	 */
	 public $status = null;

	/**
	 * Время последней модификации операции
	 * Transaction modification timestamp
	 * 
	 *
	 * @var dateTime
	 */
	 public $dateTime = null;

	/**
	 * Номер операции
	 * Transaction ID in MONETA.RU
	 * 
	 *
	 * @var long
	 */
	 public $transaction = null;

	/**
	 * Внешний номер операции
	 * External transaction ID
	 * 
	 *
	 * @var string
	 */
	 public $clientTransaction = null;

}

/**
 * Тип, описывающий атрибуты операции в ответах в пакетном запросе.
	 * Transaction attributes type for responses in batch processing mode.
	 * 
 */


class TransactionBatchResponseType
{
	
	/**
	 * Поле содержит описание ошибки, если операция не была проведена.
	 * В этом случае поле transaction - пустое. Если операция проведена,
	 * то поле error пустое, а поле transaction содержит детали операции.
	 * Error description in case of tranfer processing failure.
	 * If transfer processed successfully "error" is empty
	 * and "transaction" element contains transaction details.
	 * 
	 *
	 * @var string
	 */
	 public $error = null;

	/**
	 * 
	 *
	 * @var TransactionResponseType
	 */
	 public $transaction = null;

	/**
	 * Поле содержит код ошибки. Поле заполнено только тогда, когда есть описание ошибки в поле error.
	 * Для получения этого поля в запросе необходимо выставлять атрибут version равный или больше VERSION_2.
	 * Коды ошибок совпадают со значением элемента faultDetail (смотрите описание для этого элемента).
	 * The field contains error code. The field "errorCode" is specified if the field "error" is present and contains error description.
	 * For retrieving errorCode the request attribute "version" has to be set to "VERSION_2" or greater.
	 * Error codes values correspond to "faultDetail" description.
	 * 
	 *
	 * @var string
	 */
	 public $errorCode = null;

}

/**
 * Тип, описывающий параметры операции в запросах. Отличается от TransactionRequestType тем, что в качестве получателя можно указывать не только номер счета.
	 * Transaction parameters type for requests. The difference from TransactionRequestType is that payee may be addressed not only by account number rather than transaction ID, e-mail address or phone number.
	 * 
 */


class PaymentRequestType extends Entity
{
	
	/**
	 * Номер счета плательщика
	 * Payer account number
	 * 
	 *
	 * @var string
	 */
	 public $payer = null;

	/**
	 * Может принимать следующие значения:
	 * E-mail получателя. Сумма зачисляется на "основной счет" получателя, найденного по данному E-mail
	 * Номер операции - если значение этого поля начинается с "0". То есть значение 012345678 означает оплату операции 12345678
	 * Телефон получателя - если значение этого поля начинается со знака "+". Сумма зачисляется на "основной счет" получателя, найденного по данному телефону
	 * Номер счета получателя
	 * Content based semantic is as follows:
	 * E-mail address of payee. The amount is credited to primary account found by given e-mail address.
	 * Transaction ID prefixed with "0" (zero). For example, 012345678 means transaction 12345678.
	 * Phone number of payee prefixed with "+" (plus). The amount is credited to primary account found by given phone number.
	 * Account number of payee: 8 digits not starting with "0" (zero).
	 * 
	 *
	 * @var string
	 */
	 public $payee = null;

	/**
	 * Сумма операции.
	 * Если флаг isPayerAmount отсутствует
	 * и пользователь имеет доступ только к счету плательщика,
	 * то интерпретируется как сумма к списанию (в валюте плательщика).
	 * Если флаг isPayerAmount отсутствует
	 * и пользователь имеет доступ только к счету получателя,
	 * то интерпретируется как сумма к зачислению (в валюте получателя).
	 * Transaction amount.
	 * If isPayerAmount is omitted
	 * and user has access only to payer account,
	 * then is interpreted as debit amount (in payer's currency).
	 * If isPayerAmount is omitted
	 * and user has access only to payee account,
	 * then is interpreted as credit amount (in payee's currency).
	 * 
	 *
	 * @var decimal
	 */
	 public $amount = null;

	/**
	 * Если пользователь имеет доступ как к счету плательщика, так и счету получателя,
	 * то флаг isPayerAmount обязателен.
	 * Если флаг isPayerAmount установлен (true), то amount используется как сумма к списанию (в валюте плательщика).
	 * Если флаг isPayerAmount сброшен (false), то amount используется как сумма к зачислению (в валюте получателя).
	 * If user has access to both accounts, then isPayerAmount flag is obligatory.
	 * If isPayerAmount flag is "true", then amount is used as debit amount (in payer's currency).
	 * If isPayerAmount flag is "false", then amount is used as credit amount (in payee's currency).
	 * 
	 *
	 * @var boolean
	 */
	 public $isPayerAmount = null;

	/**
	 * Платежный пароль счета плательщика
	 * Payment password for payer account
	 * 
	 *
	 * @var normalizedString
	 */
	 public $paymentPassword = null;

	/**
	 * Внешний номер операции
	 * External transaction ID
	 * 
	 *
	 * @var string
	 */
	 public $clientTransaction = null;

	/**
	 * Описание операции
	 * Transaction description or comments
	 * 
	 *
	 * @var normalizedString
	 */
	 public $description = null;

	/**
	 * Набор полей, которые необходимо сохранить в качестве атрибутов операции. Значения дат в формате dd.MM.yyyy HH:mm:ss
	 * Key-value pairs that will be saved as a transaction attributes. Use format dd.MM.yyyy HH:mm:ss for date values
	 * 
	 *
	 * @var OperationInfo
	 */
	 public $operationInfo = null;

	/**
	 * Запрос для платежного пароля
	 * Payment password challenge
	 * 
	 *
	 * @var string
	 */
	 public $paymentPasswordChallenge = null;

}

/**
 * Тип, описывающий параметры операции в запросах в пакетном режиме.
	 * Transaction parameters type for requests in batch processing mode.
	 * 
 */


class PaymentBatchRequestType extends Entity
{
	
	/**
	 * Флаг, указывающий выполнять ли все денежные переводы в одной транзакции.
	 * Если transactional = true, то:
	 * при возникновении ошибки все проведенные операции будут отменены
	 * можно проводить только операции со счетами монеты. Нельзя выводить деньги на внешние платежные системы.
	 * Если transactional = false, то:
	 * при возникновении ошибки все проведенные операции будут сохранены
	 * можно проводить любые операции, которые доступны в TransferRequest
	 * если выставить флаг exitOnFailure = false, то при возникновении ошибки можно пропустить операцию
	 * и продолжить выполнение операций дальше
	 * Joining all transfers in batch processing into one transaction.
	 * True -- all processed transfers will be rolled back on exceptions, no external transfers are allowed.
	 * False -- only current transfer rolled back on exceptions, external transfers are allowed.
	 * 
	 *
	 * @var boolean
	 */
	 public $transactional = null;

	/**
	 * Флаг, указывающий прерывать ли выполнение пакета операций, если произошла ошибка.
	 * Используется только при transactional = false
	 * Stops batch processing on exceptions. Used only in conjunction with transactional=false.
	 * 
	 *
	 * @var boolean
	 */
	 public $exitOnFailure = null;

	/**
	 * Набор операций, которые необходимо выполнить в одном пакете.
	 * Операции выполняются в том порядке, в котором они переданы в запросе.
	 * Set of transfers to be processed in one batch.
	 * Processed in order of appearance.
	 * 
	 *
	 * @var Entity
	 */
	 public $transaction = null;

	/**
	 * Набор операций, которые необходимо выполнить в одном пакете.
	 * Операции выполняются в том порядке, в котором они переданы в запросе.
	 * Set of transfers to be processed in one batch.
	 * Processed in order of appearance.
	 * 
	 *
	 * @param Entity
	 *
	 * @return void
	 */
	public function addTransaction(Entity $item)
	{
		$this->transaction[] = $item;
	}

}

/**
 * Тип, описывающий атрибуты операции в ответах в пакетном запросе.
	 * Transaction attributes type for responses in batch processing mode.
	 * 
 */


class OperationInfoBatchResponseType
{
	
	/**
	 * Поле содержит описание ошибки, если операция не была проведена.
	 * В этом случае поле transaction - пустое. Если операция проведена,
	 * то поле error пустое, а поле transaction содержит детали операции.
	 * Error description in case of tranfer processing failure.
	 * If transfer processed successfully "error" is empty
	 * and "transaction" element contains transaction details.
	 * 
	 *
	 * @var string
	 */
	 public $error = null;

	/**
	 * 
	 *
	 * @var OperationInfo
	 */
	 public $transaction = null;

	/**
	 * Поле содержит код ошибки. Поле заполнено только тогда, когда есть описание ошибки в поле error.
	 * Для получения этого поля в запросе необходимо выставлять атрибут version равный или больше VERSION_2.
	 * Коды ошибок совпадают со значением элемента faultDetail (смотрите описание для этого элемента).
	 * The field contains error code. The field "errorCode" is specified if the field "error" is present and contains error description.
	 * For retrieving errorCode the request attribute "version" has to be set to "VERSION_2" or greater.
	 * Error codes values correspond to "faultDetail" description.
	 * 
	 *
	 * @var string
	 */
	 public $errorCode = null;

}

/**
 * Тип для запроса на регистрацию операции с блокировкой средств на счете плательщика.
	 * Transaction registration and debiting funds from payer's account request type.
	 * 
 */


class AuthoriseTransactionRequestType extends TransactionRequestType
{
	
	/**
	 * Номер операции. Необязательное поле.
	 * Transaction ID. Optional.
	 * 
	 *
	 * @var long
	 */
	 public $transactionId = null;

}

/**
 * Тип, описывающий параметры операции в запросах в пакетном режиме.
	 * Transaction parameters type for requests in batch processing mode.
	 * 
 */


class AuthoriseTransactionBatchRequestType extends Entity
{
	
	/**
	 * Флаг, указывающий выполнять ли все денежные переводы в одной транзакции.
	 * Если transactional = true, то:
	 * при возникновении ошибки все проведенные операции будут отменены
	 * можно проводить только операции со счетами монеты. Нельзя выводить деньги на внешние платежные системы.
	 * Если transactional = false, то:
	 * при возникновении ошибки все проведенные операции будут сохранены
	 * можно проводить любые операции, которые доступны в TransferRequest
	 * если выставить флаг exitOnFailure = false, то при возникновении ошибки можно пропустить операцию
	 * и продолжить выполнение операций дальше
	 * Joining all transfers in batch processing into one transaction.
	 * True -- all processed transfers will be rolled back on exceptions, no external transfers are allowed.
	 * False -- only current transfer rolled back on exceptions, external transfers are allowed.
	 * 
	 *
	 * @var boolean
	 */
	 public $transactional = null;

	/**
	 * Флаг, указывающий прерывать ли выполнение пакета операций, если произошла ошибка.
	 * Используется только при transactional = false
	 * Stops batch processing on exceptions. Used only in conjunction with transactional=false.
	 * 
	 *
	 * @var boolean
	 */
	 public $exitOnFailure = null;

	/**
	 * Набор операций, которые необходимо выполнить в одном пакете.
	 * Операции выполняются в том порядке, в котором они переданы в запросе.
	 * Set of transfers to be processed in one batch.
	 * Processed in order of appearance.
	 * 
	 *
	 * @var Entity
	 */
	 public $transaction = null;

	/**
	 * Набор операций, которые необходимо выполнить в одном пакете.
	 * Операции выполняются в том порядке, в котором они переданы в запросе.
	 * Set of transfers to be processed in one batch.
	 * Processed in order of appearance.
	 * 
	 *
	 * @param Entity
	 *
	 * @return void
	 */
	public function addTransaction(Entity $item)
	{
		$this->transaction[] = $item;
	}

}

/**
 * Тип для запроса подтверждения операции.
	 * Transaction confirmation request type.
	 * 
 */


class ConfirmTransactionRequestType
{
	
	/**
	 * Номер операции
	 * Transaction ID
	 * 
	 *
	 * @var long
	 */
	 public $transactionId = null;

	/**
	 * Платежный пароль счета плательщика
	 * Payment password for payer account
	 * 
	 *
	 * @var normalizedString
	 */
	 public $paymentPassword = null;

	/**
	 * Код протекции
	 * Protection code
	 * 
	 *
	 * @var string
	 */
	 public $protectionCode = null;

	/**
	 * Набор полей, которые необходимо сохранить в качестве атрибутов операции. Значения дат в формате dd.MM.yyyy HH:mm:ss
	 * Key-value pairs that will be saved as a transaction attributes. Use format dd.MM.yyyy HH:mm:ss for date values
	 * 
	 *
	 * @var OperationInfo
	 */
	 public $operationInfo = null;

	/**
	 * Сумма операции.
	 * Если флаг isPayerAmount отсутствует
	 * и пользователь имеет доступ только к счету плательщика,
	 * то интерпретируется как сумма к списанию (в валюте плательщика).
	 * Если флаг isPayerAmount отсутствует
	 * и пользователь имеет доступ только к счету получателя,
	 * то интерпретируется как сумма к зачислению (в валюте получателя).
	 * Transaction amount.
	 * If isPayerAmount is omitted
	 * and user has access only to payer account,
	 * then is interpreted as debit amount (in payer's currency).
	 * If isPayerAmount is omitted
	 * and user has access only to payee account,
	 * then is interpreted as credit amount (in payee's currency).
	 * 
	 *
	 * @var decimal
	 */
	 public $amount = null;

	/**
	 * Если пользователь имеет доступ как к счету плательщика, так и счету получателя,
	 * то флаг isPayerAmount обязателен.
	 * Если флаг isPayerAmount установлен (true), то amount используется как сумма к списанию (в валюте плательщика).
	 * Если флаг isPayerAmount сброшен (false), то amount используется как сумма к зачислению (в валюте получателя).
	 * If user has access to both accounts, then isPayerAmount flag is obligatory.
	 * If isPayerAmount flag is "true", then amount is used as debit amount (in payer's currency).
	 * If isPayerAmount flag is "false", then amount is used as credit amount (in payee's currency).
	 * 
	 *
	 * @var boolean
	 */
	 public $isPayerAmount = null;

	/**
	 * Запрос для платежного пароля
	 * Payment password challenge
	 * 
	 *
	 * @var string
	 */
	 public $paymentPasswordChallenge = null;

	/**
	 * Внешний номер операции
	 * External transaction ID
	 * 
	 *
	 * @var string
	 */
	 public $clientTransaction = null;

}

/**
 * Тип для запроса подтверждения операции в пакетном режиме.
	 * Batch mode transaction confirmation request type.
	 * 
 */


class ConfirmTransactionBatchRequestType extends Entity
{
	
	/**
	 * Флаг, указывающий выполнять ли все денежные переводы в одной транзакции.
	 * Если transactional = true, то:
	 * при возникновении ошибки все проведенные операции будут отменены
	 * можно проводить только операции со счетами монеты. Нельзя выводить деньги на внешние платежные системы.
	 * Если transactional = false, то:
	 * при возникновении ошибки все проведенные операции будут сохранены
	 * можно проводить любые операции, которые доступны в TransferRequest
	 * если выставить флаг exitOnFailure = false, то при возникновении ошибки можно пропустить операцию
	 * и продолжить выполнение операций дальше
	 * Joining all transfers in batch processing into one transaction.
	 * True -- all processed transfers will be rolled back on exceptions, no external transfers are allowed.
	 * False -- only current transfer rolled back on exceptions, external transfers are allowed.
	 * 
	 *
	 * @var boolean
	 */
	 public $transactional = null;

	/**
	 * Флаг, указывающий прерывать ли выполнение пакета операций, если произошла ошибка.
	 * Используется только при transactional = false
	 * Stops batch processing on exceptions. Used only in conjunction with transactional=false.
	 * 
	 *
	 * @var boolean
	 */
	 public $exitOnFailure = null;

	/**
	 * Набор операций, которые необходимо выполнить в одном пакете.
	 * Операции выполняются в том порядке, в котором они переданы в запросе.
	 * Set of transfers to be processed in one batch.
	 * Processed in order of appearance.
	 * 
	 *
	 * @var ConfirmTransactionRequestType
	 */
	 public $transaction = null;

	/**
	 * Набор операций, которые необходимо выполнить в одном пакете.
	 * Операции выполняются в том порядке, в котором они переданы в запросе.
	 * Set of transfers to be processed in one batch.
	 * Processed in order of appearance.
	 * 
	 *
	 * @param ConfirmTransactionRequestType
	 *
	 * @return void
	 */
	public function addTransaction(ConfirmTransactionRequestType $item)
	{
		$this->transaction[] = $item;
	}

}

/**
 * Тип для запроса на отмену операции.
	 * Transaction cancelation request type.
	 * 
 */


class CancelTransactionRequestType
{
	
	/**
	 * Номер операции
	 * Transaction ID
	 * 
	 *
	 * @var long
	 */
	 public $transactionId = null;

	/**
	 * Код протекции
	 * Protection code
	 * 
	 *
	 * @var string
	 */
	 public $protectionCode = null;

	/**
	 * Описание операции
	 * Transaction description or comments
	 * 
	 *
	 * @var normalizedString
	 */
	 public $description = null;

}

/**
 * Тип, описывающий атрибуты при ответе на запрос отмены операции.
	 * Transaction cancelation response type.
	 * 
 */


class CancelTransactionResponseType
{
	
	/**
	 * Номер операции
	 * Transaction ID
	 * 
	 *
	 * @var long
	 */
	 public $transactionId = null;

	/**
	 * Статус операции
	 * Transaction status
	 * 
	 *
	 * @var string
	 */
	 public $operationStatus = null;

}

/**
 * Тип для запроса на отмену операций в пакетном режиме.
	 * Batch mode transaction cancelation request type.
	 * 
 */


class CancelTransactionBatchRequestType extends Entity
{
	
	/**
	 * Флаг, указывающий выполнять ли все денежные переводы в одной транзакции.
	 * Если transactional = true, то:
	 * при возникновении ошибки все проведенные операции будут отменены
	 * можно проводить только операции со счетами монеты. Нельзя выводить деньги на внешние платежные системы.
	 * Если transactional = false, то:
	 * при возникновении ошибки все проведенные операции будут сохранены
	 * можно проводить любые операции, которые доступны в TransferRequest
	 * если выставить флаг exitOnFailure = false, то при возникновении ошибки можно пропустить операцию
	 * и продолжить выполнение операций дальше
	 * Joining all transfers in batch processing into one transaction.
	 * True -- all processed transfers will be rolled back on exceptions, no external transfers are allowed.
	 * False -- only current transfer rolled back on exceptions, external transfers are allowed.
	 * 
	 *
	 * @var boolean
	 */
	 public $transactional = null;

	/**
	 * Флаг, указывающий прерывать ли выполнение пакета операций, если произошла ошибка.
	 * Используется только при transactional = false
	 * Stops batch processing on exceptions. Used only in conjunction with transactional=false.
	 * 
	 *
	 * @var boolean
	 */
	 public $exitOnFailure = null;

	/**
	 * Набор операций, которые необходимо выполнить в одном пакете.
	 * Операции выполняются в том порядке, в котором они переданы в запросе.
	 * Set of transfers to be processed in one batch.
	 * Processed in order of appearance.
	 * 
	 *
	 * @var CancelTransactionRequestType
	 */
	 public $transaction = null;

	/**
	 * Набор операций, которые необходимо выполнить в одном пакете.
	 * Операции выполняются в том порядке, в котором они переданы в запросе.
	 * Set of transfers to be processed in one batch.
	 * Processed in order of appearance.
	 * 
	 *
	 * @param CancelTransactionRequestType
	 *
	 * @return void
	 */
	public function addTransaction(CancelTransactionRequestType $item)
	{
		$this->transaction[] = $item;
	}

}

/**
 * Тип, описывающий атрибуты при ответе на запрос отмены операций в пакетной режиме.
	 * Transaction cancelation response in batch mode.
	 * 
 */


class CancelTransactionBatchResponseType
{
	
	/**
	 * Поле содержит описание ошибки, если операция не была проведена.
	 * В этом случае поле transaction - пустое. Если операция проведена,
	 * то поле error пустое, а поле transaction содержит детали операции.
	 * Error description in case of tranfer processing failure.
	 * If transfer processed successfully "error" is empty
	 * and "transaction" element contains transaction details.
	 * 
	 *
	 * @var string
	 */
	 public $error = null;

	/**
	 * 
	 *
	 * @var CancelTransactionResponseType
	 */
	 public $transaction = null;

	/**
	 * Поле содержит код ошибки. Поле заполнено только тогда, когда есть описание ошибки в поле error.
	 * Для получения этого поля в запросе необходимо выставлять атрибут version равный или больше VERSION_2.
	 * Коды ошибок совпадают со значением элемента faultDetail (смотрите описание для этого элемента).
	 * The field contains error code. The field "errorCode" is specified if the field "error" is present and contains error description.
	 * For retrieving errorCode the request attribute "version" has to be set to "VERSION_2" or greater.
	 * Error codes values correspond to "faultDetail" description.
	 * 
	 *
	 * @var string
	 */
	 public $errorCode = null;

}

/**
 * Тип, описывающий параметры операции для выставления счета к оплате.
	 * Transaction parameters type for making new invoice (request for payment).
	 * 
 */


class InvoiceRequestType
{
	
	/**
	 * Номер счета плательщика
	 * Payer account number
	 * 
	 *
	 * @var string
	 */
	 public $payer = null;

	/**
	 * Номер счета получателя
	 * Payee account number
	 * 
	 *
	 * @var long
	 */
	 public $payee = null;

	/**
	 * Сумма
	 * Amount
	 * 
	 *
	 * @var decimal
	 */
	 public $amount = null;

	/**
	 * Внешний номер операции
	 * external transaction identificator
	 * 
	 *
	 * @var string
	 */
	 public $clientTransaction = null;

	/**
	 * Описание операции
	 * Transaction description or comments
	 * 
	 *
	 * @var normalizedString
	 */
	 public $description = null;

	/**
	 * Произвольный параметр
	 * Custom parameter
	 * 
	 *
	 * @var string
	 */
	 public $mnt_custom1 = null;

	/**
	 * Произвольный параметр
	 * Custom parameter
	 * 
	 *
	 * @var string
	 */
	 public $mnt_custom2 = null;

	/**
	 * Произвольный параметр
	 * Custom parameter
	 * 
	 *
	 * @var string
	 */
	 public $mnt_custom3 = null;

	/**
	 * Набор полей, которые необходимо сохранить в качестве атрибутов операции. Значения дат в формате dd.MM.yyyy HH:mm:ss.
	 * Для того чтобы провести прямое дебетование, следует передать атрибут с ключом "SUBSCRIBERID" и в значении указать ID подписчика.
	 * Прямое дебетование будет проведено, если ID подписчика указано верно, если пользователь разрешил проводить прямое дебетование,
	 * если указанная сумма есть на балансе пользователя. В данном случае деньги будут списаны со счета пользователя, в ответе на запрос
	 * в поле Статус будет указано INPROGRESS, зачисление денег на счет получателя будет проведено в асинхронном режиме.
	 * Если прямое дебетование не может быть проведено или во время его выполнения произойдет ошибка,
	 * то инвойс будет создан и в ответе на запрос в поле Статус будет указано CREATED.
	 * USERCONTACT - ссылка на оплату счета будет отправлена в письме или SMS (можно перечислить получателей через запятую).
	 * Key-value pairs that will be saved as a transaction attributes. Use format dd.MM.yyyy HH:mm:ss for date values.
	 * To initiate direct debit you have to pass "SUBSCRIBERID" attribute with corresponding subscriber id in the value.
	 * The direct debit will be processed if subscriber id is specified, the direct debit processing is permitted by user and user has enough funds on his account.
	 * If the direct debit is processed successfully, user's account is debited, the transaction status reported in the response is INPROGRESS, crediting the payee's account starts asynchronously.
	 * If the direct debit can't be processed or an error occures during the processing, the invoice is left registered and the transaction status is CREATED.
	 * USERCONTACT - payment link will be sent via e-mail or SMS (comma separated recepients).
	 * 
	 *
	 * @var OperationInfo
	 */
	 public $operationInfo = null;

}

/**
 * Тип, описывающий параметры операции в запросах в пакетном режиме.
	 * Transaction parameters type for requests in batch processing mode.
	 * 
 */


class InvoiceBatchRequestType extends Entity
{
	
	/**
	 * Флаг, указывающий выполнять ли все денежные переводы в одной транзакции.
	 * Если transactional = true, то:
	 * при возникновении ошибки все проведенные операции будут отменены
	 * можно проводить только операции со счетами монеты. Нельзя выводить деньги на внешние платежные системы.
	 * Если transactional = false, то:
	 * при возникновении ошибки все проведенные операции будут сохранены
	 * можно проводить любые операции, которые доступны в TransferRequest
	 * если выставить флаг exitOnFailure = false, то при возникновении ошибки можно пропустить операцию
	 * и продолжить выполнение операций дальше
	 * Joining all transfers in batch processing into one transaction.
	 * True -- all processed transfers will be rolled back on exceptions, no external transfers are allowed.
	 * False -- only current transfer rolled back on exceptions, external transfers are allowed.
	 * 
	 *
	 * @var boolean
	 */
	 public $transactional = null;

	/**
	 * Флаг, указывающий прерывать ли выполнение пакета операций, если произошла ошибка.
	 * Используется только при transactional = false
	 * Stops batch processing on exceptions. Used only in conjunction with transactional=false.
	 * 
	 *
	 * @var boolean
	 */
	 public $exitOnFailure = null;

	/**
	 * Набор операций, которые необходимо выполнить в одном пакете.
	 * Операции выполняются в том порядке, в котором они переданы в запросе.
	 * Set of transfers to be processed in one batch.
	 * Processed in order of appearance.
	 * 
	 *
	 * @var InvoiceRequestType
	 */
	 public $transaction = null;

	/**
	 * Набор операций, которые необходимо выполнить в одном пакете.
	 * Операции выполняются в том порядке, в котором они переданы в запросе.
	 * Set of transfers to be processed in one batch.
	 * Processed in order of appearance.
	 * 
	 *
	 * @param InvoiceRequestType
	 *
	 * @return void
	 */
	public function addTransaction(InvoiceRequestType $item)
	{
		$this->transaction[] = $item;
	}

}

/**
 * Тип, описывающий суммы и комиссии в предварительном расчете операции.
	 * Type describes amount and fees for preliminary calculation of transaction.
	 * 
 */


class ForecastTransactionResponseType
{
	
	/**
	 * Номер счета плательщика
	 * Payer account number
	 * 
	 *
	 * @var long
	 */
	 public $payer = null;

	/**
	 * Валюта счета плательщика
	 * Currency of payer account
	 * 
	 *
	 * @var string
	 */
	 public $payerCurrency = null;

	/**
	 * Сумма к списанию
	 * Debit amount
	 * 
	 *
	 * @var decimal
	 */
	 public $payerAmount = null;

	/**
	 * Комиссия списания средств
	 * Debit fee
	 * 
	 *
	 * @var decimal
	 */
	 public $payerFee = null;

	/**
	 * Номер счета получателя
	 * Payee account number
	 * 
	 *
	 * @var long
	 */
	 public $payee = null;

	/**
	 * Валюта счета получателя
	 * Currency of payee account
	 * 
	 *
	 * @var string
	 */
	 public $payeeCurrency = null;

	/**
	 * Сумма к зачислению
	 * Credit amount
	 * 
	 *
	 * @var decimal
	 */
	 public $payeeAmount = null;

	/**
	 * Комиссия зачисления средств
	 * Credit fee
	 * 
	 *
	 * @var decimal
	 */
	 public $payeeFee = null;

	/**
	 * Название счета плательщика
	 * Payer account alias
	 * 
	 *
	 * @var string
	 */
	 public $payerAlias = null;

	/**
	 * Название счета получателя
	 * Payee account alias
	 * 
	 *
	 * @var string
	 */
	 public $payeeAlias = null;

}

/**
 * Тип, описывающий состояние операции в системе МОНЕТА.РУ
	 * Type describes verification status of transaction.
	 * 
 */


class VerifyTransferResponseType
{
	
	/**
	 * Если поле равно true, то данная операция может
	 * быть проведена в системе МОНЕТА.РУ
	 * If true the transaction may be processed in MONETA.RU
	 * 
	 *
	 * @var boolean
	 */
	 public $isTransactionValid = null;

	/**
	 * Описание текущего статуса операции.
	 * Description of current transaction status.
	 * 
	 *
	 * @var string
	 */
	 public $description = null;

	/**
	 * Если операция может быть проведена, то в данном поле содержатся детали операции.
	 * Иначе - это поле пустое.
	 * Additional information if transaction may be processed. Otherwise empty.
	 * 
	 *
	 * @var ForecastTransactionResponseType
	 */
	 public $forecast = null;

	/**
	 * Поле содержит код ошибки. Поле заполнено только тогда, когда есть описание ошибки в поле description.
	 * Для получения этого поля в запросе необходимо выставлять атрибут version равный или больше VERSION_2.
	 * Коды ошибок совпадают со значением элемента faultDetail (смотрите описание для этого элемента).
	 * The field contains error code. The field "errorCode" is specified if the field "description" is present and contains error description.
	 * For retrieving errorCode the request attribute "version" has to be set to "VERSION_2" or greater.
	 * Error codes values correspond to "faultDetail" description.
	 * 
	 *
	 * @var string
	 */
	 public $errorCode = null;

	/**
	 * Дополнительные свойства операции.
	 * Для получения этого поля в запросе необходимо выставлять атрибут version равный или больше VERSION_2.
	 * Если в ответе придет поле с ключом key="paymentPasswordChallengeRequired" и значением value="true", то перед проведением операции следует сделать запрос "GetAccountPaymentPasswordChallengeRequest", который вернет строку запроса для платежного пароля. Это значение необходимо использовать в поле "paymentPasswordChallenge" в запросах на проведение операции (например: "PaymentRequest", "TransferRequest", "AuthoriseTransactionRequest" и т.д.).
	 * Additional transaction details.
	 * For retrieving operationInfo the request attribute "version" has to be set to "VERSION_2" or greater.
	 * If the response contains an attribute with the key="paymentPasswordChallengeRequired" and value="true", you have to call "GetAccountPaymentPasswordChallengeRequest" for payer's account to retrieve "paymentPasswordChallenge", which is used within financial processing requests such as
	 * "PaymentRequest", "TransferRequest", "AuthoriseTransactionRequest".
	 * 
	 *
	 * @var OperationInfo
	 */
	 public $operationInfo = null;

}

/**
 * Ответ на запрос проверки проведения операции в системе МОНЕТА.РУ
	 * Transaction verification response.
	 * 
 */


class VerifyTransactionResponseType extends VerifyTransferResponseType
{
	
	/**
	 * Идентификатор операции в системе МОНЕТА.РУ.
	 * The identifier of transaction.
	 * 
	 *
	 * @var long
	 */
	 public $transactionId = null;

	/**
	 * Статус операции в системе МОНЕТА.РУ.
	 * Transaction status type in MONETA.RU
	 * 
	 *
	 * @var string
	 */
	 public $operationStatus = null;

}

/**
 * Тип, описывающий атрибуты счета в системе МОНЕТА.РУ.
	 * Account information container type.
	 * 
 */


class AccountInfo
{
	
	/**
	 * Номер счета в системе МОНЕТА.РУ
	 * Account number
	 * 
	 *
	 * @var long
	 */
	 public $id = null;

	/**
	 * Валюта данного счета
	 * Currency of account
	 * 
	 *
	 * @var string
	 */
	 public $currency = null;

	/**
	 * Баланс на данном счете
	 * Current balance of account
	 * 
	 *
	 * @var decimal
	 */
	 public $balance = null;

	/**
	 * Доступный баланс на данном счете
	 * Available balance of account
	 * 
	 *
	 * @var decimal
	 */
	 public $availableBalance = null;

	/**
	 * Тип счета в системе МОНЕТА.РУ
	 * Type of account
	 * 
	 *
	 * @var int
	 */
	 public $type = null;

	/**
	 * Статус счета в системе МОНЕТА.РУ
	 * Status of account
	 * 
	 *
	 * @var int
	 */
	 public $status = null;

	/**
	 * Название счета в системе МОНЕТА.РУ. Необязательное поле
	 * Alias of account. Optional.
	 * 
	 *
	 * @var string
	 */
	 public $alias = null;

	/**
	 * URL после списания средств. Необязательное поле.
	 * URL on debiting. Optional.
	 * 
	 *
	 * @var string
	 */
	 public $onSuccessfulDebitUrl = null;

	/**
	 * URL после зачисления средств. Необязательное поле.
	 * URL on crediting. Optional.
	 * 
	 *
	 * @var string
	 */
	 public $onSuccessfulCreditUrl = null;

	/**
	 * Код проверки целостности данных. Необязательное поле.
	 * Payment form data integrity signature. Optional.
	 * 
	 *
	 * @var string
	 */
	 public $signature = null;

	/**
	 * Если баланс счета меньше данного значения, то раз в сутки уходит уведомление об этом событии. Необязательное поле.
	 * Daily notifications if balance is less than threshold. Optional.
	 * 
	 *
	 * @var decimal
	 */
	 public $lowBalanceThreshold = null;

	/**
	 * Если баланс счета больше данного значения, то раз в сутки уходит уведомление об этом событии. Необязательное поле.
	 * Daily notifications if balance is greater than threshold. Optional.
	 * 
	 *
	 * @var decimal
	 */
	 public $highBalanceThreshold = null;

	/**
	 * Информация о доступе к счету. Информация отдается, если счет является делегированным. Необязательное поле.
	 * Account access information. Available if the account is delegated, otherwise omitted. Optional.
	 * 
	 *
	 * @var AccountAccessInfo
	 */
	 public $accountAccess = null;

	/**
	 * Счет-прототип с которого берутся свойства "по умолчанию". Необязательное поле.
	 * Prototype account for default properties values. Optional.
	 * 
	 *
	 * @var long
	 */
	 public $prototypeAccountId = null;

	/**
	 * URL после отмены списания средств. Необязательное поле.
	 * URL on cancelled debit. Optional.
	 * 
	 *
	 * @var string
	 */
	 public $onCancelledDebitUrl = null;

	/**
	 * URL после отмены зачисления средств. Необязательное поле.
	 * URL on cancelled credit. Optional.
	 * 
	 *
	 * @var string
	 */
	 public $onCancelledCreditUrl = null;

	/**
	 * Дополнительные свойства счета.
	 * Для получения этого поля в запросе необходимо выставлять атрибут version равный или больше VERSION_2.
	 * Возможные ключи:
	 * paymentPasswordType - тип платежного пароля.
	 * STATIC - статический платежный пароль,
	 * SEQUENCE_BY_ORDER - последовательность по порядку,
	 * SMS_SIMPLE - sms пароль,
	 * SMS_SESSION - sms пароль (сессионный),
	 * TOTP_RFC6238 - time-based one-time password algorithm;
	 * paymentPasswordChallengeRequired - если в ответе придет поле с ключом key="paymentPasswordChallengeRequired"
	 * и значением value="true", то перед проведением операции следует сделать запрос "GetAccountPaymentPasswordChallengeRequest",
	 * который вернет строку запроса для платежного пароля. Это значение необходимо использовать в поле "paymentPasswordChallenge"
	 * в запросах на проведение операции (например: "PaymentRequest", "TransferRequest", "AuthoriseTransactionRequest" и т.д.);
	 * Additional account attributes.
	 * For retrieving additional account attributes the request attribute "version" has to be set to "VERSION_2" or greater.
	 * Possible keys:
	 * paymentPasswordType - payment password type.
	 * STATIC - static payment password,
	 * SEQUENCE_BY_ORDER - ordered sequence,
	 * SMS_SIMPLE - sms password,
	 * SMS_SESSION - sms password (sessional),
	 * TOTP_RFC6238 - time-based one-time password algorithm;
	 * paymentPasswordChallengeRequired - if the response contains an attribute with the key="paymentPasswordChallengeRequired"
	 * and value="true", you have to call "GetAccountPaymentPasswordChallengeRequest" for payer's account to retrieve "paymentPasswordChallenge",
	 * which is used within financial processing requests such as
	 * "PaymentRequest", "TransferRequest", "AuthoriseTransactionRequest";
	 * 
	 *
	 * @var KeyValueAttribute
	 */
	 public $attribute = null;

	/**
	 * Дополнительные свойства счета.
	 * Для получения этого поля в запросе необходимо выставлять атрибут version равный или больше VERSION_2.
	 * Возможные ключи:
	 * paymentPasswordType - тип платежного пароля.
	 * STATIC - статический платежный пароль,
	 * SEQUENCE_BY_ORDER - последовательность по порядку,
	 * SMS_SIMPLE - sms пароль,
	 * SMS_SESSION - sms пароль (сессионный),
	 * TOTP_RFC6238 - time-based one-time password algorithm;
	 * paymentPasswordChallengeRequired - если в ответе придет поле с ключом key="paymentPasswordChallengeRequired"
	 * и значением value="true", то перед проведением операции следует сделать запрос "GetAccountPaymentPasswordChallengeRequest",
	 * который вернет строку запроса для платежного пароля. Это значение необходимо использовать в поле "paymentPasswordChallenge"
	 * в запросах на проведение операции (например: "PaymentRequest", "TransferRequest", "AuthoriseTransactionRequest" и т.д.);
	 * Additional account attributes.
	 * For retrieving additional account attributes the request attribute "version" has to be set to "VERSION_2" or greater.
	 * Possible keys:
	 * paymentPasswordType - payment password type.
	 * STATIC - static payment password,
	 * SEQUENCE_BY_ORDER - ordered sequence,
	 * SMS_SIMPLE - sms password,
	 * SMS_SESSION - sms password (sessional),
	 * TOTP_RFC6238 - time-based one-time password algorithm;
	 * paymentPasswordChallengeRequired - if the response contains an attribute with the key="paymentPasswordChallengeRequired"
	 * and value="true", you have to call "GetAccountPaymentPasswordChallengeRequest" for payer's account to retrieve "paymentPasswordChallenge",
	 * which is used within financial processing requests such as
	 * "PaymentRequest", "TransferRequest", "AuthoriseTransactionRequest";
	 * 
	 *
	 * @param KeyValueAttribute
	 *
	 * @return void
	 */
	public function addAttribute(KeyValueAttribute $item)
	{
		$this->attribute[] = $item;
	}

}

/**
 * Тип, описывающий доступ к счету.
	 * Account access description type.
	 * 
 */


class AccountAccessInfo
{
	
	/**
	 * Доступ на изменение свойств счета
	 * Account attributes modification access
	 * 
	 *
	 * @var boolean
	 */
	 public $accessToWrite = null;

	/**
	 * Доступ на снятие средств со счета
	 * Account debiting access
	 * 
	 *
	 * @var boolean
	 */
	 public $accessToTakenOut = null;

	/**
	 * Доступ на зачисление средств на счет
	 * Account crediting access
	 * 
	 *
	 * @var boolean
	 */
	 public $accessToTakenIn = null;

}

/**
 * Тип, который позволяет работать с сущностями типа "ключ-значение".
	 * Key-value pairs type.
	 * 
 */


class KeyValueAttribute
{
	
	/**
	 * 
	 *
	 * @var string
	 */
	 public $key = null;

	/**
	 * 
	 *
	 * @var string
	 */
	 public $value = null;

}

/**
 * Тип, расширяющий KeyValueAttribute.
	 * Поле approved показывает проверено или нет данное свойство. Поле approved - не обязательное.
	 * Поле published показывает доступно или нет чтение свойства для всех пользователей. Поле published - не обязательное.
	 * Extended KeyValueAttribute Type.
	 * Approved element shows if attribute value is approved or not. Approved element is optional.
	 * Published element shows if attribute value is available for reading for all users. Published element is optional.
	 * 
 */


class KeyValueApprovedAttribute extends KeyValueAttribute
{
	
	/**
	 * 
	 *
	 * @var boolean
	 */
	 public $approved = null;

	/**
	 * Для чтения этого атрибута в запросе необходимо выставлять атрибут version равный или больше VERSION_2.
	 * Для записи version можно не указывать.
	 * The value "VERSION_2" of request's attribute "version" is required for reading of this attribute.
	 * The request's attribute "version" for writing is optional.
	 * 
	 *
	 * @var boolean
	 */
	 public $published = null;

}

/**
 * Тип, описывающий операцию в системе МОНЕТА.РУ.
	 * Он представляет собой номер (id) операции и набор полей,
	 * которые присутствуют у данной операции. Поля представлены в виде "ключ-значение".
	 * Transaction type contains transaction id and key-value pairs representing transaction attributes.
	 * 
 */


class OperationInfo
{
	
	/**
	 * Номер операции
	 * Transaction ID
	 * 
	 *
	 * @var long
	 */
	 public $id = null;

	/**
	 * Поля операции. Полей в операции может быть 0 и более.
	 * Список полей:
	 * clienttransaction - внешний (не в системе МОНЕТА.РУ) номер операции;
	 * statusid - статус операции;
	 * typeid - тип операции:
	 * 2,10 - оплата с пользовательского счета,
	 * 3,19 - оплата с внешней платежной системы,
	 * 7,14 - пополнение счета,
	 * 4,13 - вывод на внешнюю платежную систему,
	 * 11 - вывод на пользовательский счет,
	 * 12 - внутренний перевод,
	 * 17,18 - возврат на внешнюю платежную систему;
	 * category - категория операции:
	 * DEPOSIT - ввод средств,
	 * WITHDRAWAL - вывод средств,
	 * TRANSFER - внутренний перевод,
	 * BUSINESS - товары и услуги;
	 * modified - время последнего изменения операции;
	 * sourceaccountid - номер счета, с которого произведена операция;
	 * sourcecurrencycode - валюта счета;
	 * sourceamount - сумма по операции;
	 * sourceamountfee - сумма комиссии;
	 * sourceamounttotal - общая сумма с учетом комиссии;
	 * targetaccountid - корреспондентский счет;
	 * targetalias - название корреспондентского счета;
	 * isreversed - если "true", то sourceaccountid=получатель, targetaccountid=плательщик;
	 * customfield:* - произвольный набор значений.
	 * В операции их может быть несколько.
	 * Полный ключ атрибута состоит из префикса ("customfield:") и тэга (32 символа).
	 * Например, "customfield:name";
	 * subscriberid - внешний (не в системе МОНЕТА.РУ) идентификатор подписчика.
	 * Transaction attributes. Attributes set may be empty.
	 * Attributes list:
	 * clienttransaction - external transaction ID;
	 * statusid - transaction status;
	 * typeid - transaction type:
	 * 2,10 - payment from user account,
	 * 3,19 - payment from external system,
	 * 7,14 - deposit,
	 * 4,13 - withdrawal to external system,
	 * 11 - withdrawal to user account,
	 * 12 - inner transfer,
	 * 17,18 - refund to external system;
	 * category - transaction category:
	 * DEPOSIT,
	 * WITHDRAWAL,
	 * TRANSFER,
	 * BUSINESS;
	 * modified - transaction modification timestamp;
	 * sourceaccountid - account number;
	 * sourcecurrencycode - account currency;
	 * sourceamount - transaction amount;
	 * sourceamountfee - transaction commission;
	 * sourceamounttotal - total transaction amount incl. commission;
	 * targetaccountid - correspondent account number;
	 * targetalias - alias of correspondent account;
	 * isreversed - if "true", then sourceaccountid=payee, targetaccountid=payer;
	 * customfield:* - custom list of values.
	 * The transaction may contain several attributes with different keys.
	 * The full attribute's key consists of prefix ("customfield:") and tag (32 characters).
	 * For example, "customfield:name";
	 * subscriberid - external subscriber ID.
	 * 
	 *
	 * @var KeyValueAttribute
	 */
	 public $attribute = null;

	/**
	 * Поля операции. Полей в операции может быть 0 и более.
	 * Список полей:
	 * clienttransaction - внешний (не в системе МОНЕТА.РУ) номер операции;
	 * statusid - статус операции;
	 * typeid - тип операции:
	 * 2,10 - оплата с пользовательского счета,
	 * 3,19 - оплата с внешней платежной системы,
	 * 7,14 - пополнение счета,
	 * 4,13 - вывод на внешнюю платежную систему,
	 * 11 - вывод на пользовательский счет,
	 * 12 - внутренний перевод,
	 * 17,18 - возврат на внешнюю платежную систему;
	 * category - категория операции:
	 * DEPOSIT - ввод средств,
	 * WITHDRAWAL - вывод средств,
	 * TRANSFER - внутренний перевод,
	 * BUSINESS - товары и услуги;
	 * modified - время последнего изменения операции;
	 * sourceaccountid - номер счета, с которого произведена операция;
	 * sourcecurrencycode - валюта счета;
	 * sourceamount - сумма по операции;
	 * sourceamountfee - сумма комиссии;
	 * sourceamounttotal - общая сумма с учетом комиссии;
	 * targetaccountid - корреспондентский счет;
	 * targetalias - название корреспондентского счета;
	 * isreversed - если "true", то sourceaccountid=получатель, targetaccountid=плательщик;
	 * customfield:* - произвольный набор значений.
	 * В операции их может быть несколько.
	 * Полный ключ атрибута состоит из префикса ("customfield:") и тэга (32 символа).
	 * Например, "customfield:name";
	 * subscriberid - внешний (не в системе МОНЕТА.РУ) идентификатор подписчика.
	 * Transaction attributes. Attributes set may be empty.
	 * Attributes list:
	 * clienttransaction - external transaction ID;
	 * statusid - transaction status;
	 * typeid - transaction type:
	 * 2,10 - payment from user account,
	 * 3,19 - payment from external system,
	 * 7,14 - deposit,
	 * 4,13 - withdrawal to external system,
	 * 11 - withdrawal to user account,
	 * 12 - inner transfer,
	 * 17,18 - refund to external system;
	 * category - transaction category:
	 * DEPOSIT,
	 * WITHDRAWAL,
	 * TRANSFER,
	 * BUSINESS;
	 * modified - transaction modification timestamp;
	 * sourceaccountid - account number;
	 * sourcecurrencycode - account currency;
	 * sourceamount - transaction amount;
	 * sourceamountfee - transaction commission;
	 * sourceamounttotal - total transaction amount incl. commission;
	 * targetaccountid - correspondent account number;
	 * targetalias - alias of correspondent account;
	 * isreversed - if "true", then sourceaccountid=payee, targetaccountid=payer;
	 * customfield:* - custom list of values.
	 * The transaction may contain several attributes with different keys.
	 * The full attribute's key consists of prefix ("customfield:") and tag (32 characters).
	 * For example, "customfield:name";
	 * subscriberid - external subscriber ID.
	 * 
	 *
	 * @param KeyValueAttribute
	 *
	 * @return void
	 */
	public function addAttribute(KeyValueAttribute $item)
	{
		$this->attribute[] = $item;
	}

}

/**
 * Тип, представляющий список операций.
	 * Содержит разбиение по страницам для отображения длинных списков.
	 * Transaction list type.
	 * Contains paged structure for long list presentation.
	 * 
 */


class OperationInfoList
{
	
	/**
	 * Количество операций, возвращаемых в результате запроса.
	 * Transaction per page within one request.
	 * 
	 *
	 * @var long
	 */
	 public $pageSize = null;

	/**
	 * Номер текущей страницы. Нумерация начинается с 1
	 * Current page number starting with 1.
	 * 
	 *
	 * @var long
	 */
	 public $pageNumber = null;

	/**
	 * Максимальное количество страниц с операциями по данному запросу
	 * Total page count for given request.
	 * 
	 *
	 * @var long
	 */
	 public $pagesCount = null;

	/**
	 * Количество операций на текущей странице.
	 * Меньше или равно pageSize.
	 * Последняя страница может содержать операций меньше, чем pageSize.
	 * Transactions count in current page.
	 * Less or equal to pageSize.
	 * Last page may contain less than pageSize transactions.
	 * 
	 *
	 * @var long
	 */
	 public $size = null;

	/**
	 * Общее количество операций, которое можно получить в данной
	 * выборке
	 * Total transactions count for given request.
	 * 
	 *
	 * @var long
	 */
	 public $totalSize = null;

	/**
	 * Список операций
	 * Transaction list
	 * 
	 *
	 * @var OperationInfo
	 */
	 public $operation = null;

	/**
	 * Список операций
	 * Transaction list
	 * 
	 *
	 * @param OperationInfo
	 *
	 * @return void
	 */
	public function addOperation(OperationInfo $item)
	{
		$this->operation[] = $item;
	}

}

/**
 * Тип, позволяющий задать необходимую страницу при отображении длинных списков.
	 * Long list retrieval type.
	 * 
 */


class Pager
{
	
	/**
	 * Номер страницы, которую нужно получить. Минимальное значение равно 1.
	 * Значение по умолчанию равно 1.
	 * Page number to retrieve. Minimal value is 1.
	 * By default is 1.
	 * 
	 *
	 * @var int
	 */
	 public $pageNumber = null;

	/**
	 * Сколько записей необходимо получить на одной странице. Минимальное
	 * значение равно 1. Максимальное значение равно 100. Значение по умолчанию равно 10.
	 * Transactions per page. Minimal value is 1.
	 * Maximal value is 100.
	 * By default is 10.
	 * 
	 *
	 * @var int
	 */
	 public $pageSize = null;

}

/**
 * Данные пользователя в системе МОНЕТА.РУ.
	 * Данные представляются в виде "ключ-значение" и признака подтвержденности.
	 * Можно получить доступ либо к собственным, либо к публично доступным данным
	 * (то есть к тем данным, которые пользователь сам разрешил для просмотра).
	 * Возможные ключи для пользователей с типом "client":
	 * unitid - ID пользователя в системе МОНЕТА.РУ;
	 * last_name - фамилия;
	 * first_name - имя;
	 * middle_initial_name - отчество;
	 * alias - псевдоним;
	 * country - страна;
	 * state - область, республика, штат;
	 * city - город;
	 * zip - индекс;
	 * address - адрес;
	 * email_for_notifications - адрес электронной почты;
	 * phone - номер телефона;
	 * cell_phone - номер сотового телефона;
	 * url - url сайта;
	 * sex - пол. MALE - мужской, FEMALE - женский;
	 * date_of_birth - дата рождения (формат - yyyy-mm-dd);
	 * inn - номер ИНН;
	 * timezone - часовой пояс пользователя;
	 * ui_language - язык интерфейса пользователя. RU - руский, EN - английский;
	 * customfield:* - произвольный набор значений.
	 * В данных пользователя их может быть несколько.
	 * Полный ключ атрибута состоит из префикса ("customfield:") и тэга (32 символа).
	 * Например, "customfield:name".
	 * Возможные ключи для пользователей с типом "organization":
	 * unitid - ID пользователя в системе МОНЕТА.РУ;
	 * organization_name - название организации;
	 * alias - псевдоним;
	 * fio_director - ФИО директора;
	 * phone_director - телефон директора;
	 * fio_accountant - ФИО бухгалтера;
	 * phone_accountant - телефон бухгалтера;
	 * legal_address - юридический адрес;
	 * post_address - почтовый адрес;
	 * actual_address - фактический адрес;
	 * url - url сайта;
	 * contact_info - контактная информация;
	 * contact_email - контактный e-mail;
	 * business_activity - вид деятельности;
	 * inn - номер ИНН;
	 * timezone - часовой пояс пользователя;
	 * ui_language - язык интерфейса пользователя. RU - руский, EN - английский;
	 * email_for_notifications - адрес электронной почты;
	 * customfield:* - произвольный набор значений.
	 * В данных пользователя их может быть несколько.
	 * Полный ключ атрибута состоит из префикса ("customfield:") и тэга (32 символа).
	 * Например, "customfield:name".
	 * User profile information.
	 * Data is presented as key-value pairs list.
	 * Returned attributes are either owned by authenticated user
	 * or marked as publicly available by profile owner.
	 * Possible keys for "client" profiles:
	 * unitid - structure identificator in MONETA.RU;
	 * last_name;
	 * first_name;
	 * middle_initial_name;
	 * alias;
	 * country;
	 * state;
	 * city;
	 * zip;
	 * address;
	 * email_for_notifications;
	 * phone;
	 * cell_phone;
	 * url;
	 * sex (MALE|FEMALE);
	 * date_of_birth (yyyy-mm-dd format);
	 * inn - Tax ID;
	 * timezone;
	 * ui_language (RU|EN);
	 * customfield:* - custom list of values.
	 * User profile may contain several attributes with different keys.
	 * The full attribute's key consists of prefix ("customfield:") and tag (32 characters).
	 * For example, "customfield:name".
	 * Possible keys for "organization" profile:
	 * unitid - structure identificator in MONETA.RU;
	 * organization_name;
	 * alias;
	 * fio_director - Director's Fullname ;
	 * phone_director - Director's phone;
	 * fio_accountant - Accountant's fullname;
	 * phone_accountant - Accountant's phone;
	 * legal_address - official organization address;
	 * post_address - post address;
	 * actual_address - actual address;
	 * url - site url;
	 * contact_info - contact info;
	 * contact_email - contact e-mail;
	 * business_activity - business activity;
	 * inn - Tax ID;
	 * timezone - user's time zone;
	 * ui_language (RU|EN);
	 * email_for_notifications;
	 * customfield:* - custom list of values.
	 * Organization profile may contain several attributes with different keys.
	 * The full attribute's key consists of prefix ("customfield:") and tag (32 characters).
	 * For example, "customfield:name".
	 * Список идентификаторов временных зон, которые используются в системе, доступен на странице wikipedia.org
	 * Timezone identificators supported in MONETA.RU available as TZ name on wikipedia.org
	 * 
 */


class Profile
{
	
	/**
	 * 
	 *
	 * @var KeyValueAttribute
	 */
	 public $attribute = null;

	/**
	 * 
	 *
	 * @param KeyValueAttribute
	 *
	 * @return void
	 */
	public function addAttribute(KeyValueAttribute $item)
	{
		$this->attribute[] = $item;
	}

}

/**
 * Договор в системе МОНЕТА.РУ. Данные представляются в виде "ключ-значение".
	 * Возможные ключи договора:
	 * num - номер договора;
	 * unitid - ID юнита, у которого создан договор;
	 * own - true-создан для указанного в запросе юнита, false-создан для родительского юнита;
	 * unitname - если own=false, то данное поле содержит имя юнита;
	 * datestart - дата начала договора;
	 * datestop - дата окончания договора;
	 * status - статус договора:
	 * CREATED - сформирован,
	 * SIGNED - подписан,
	 * ACTIVE - активный,
	 * PAUSED - приостановлен,
	 * INACTIVE - расторгнут;
	 * type - тип договора:
	 * PARTNER - договор,
	 * VIRTUAL - виртуальный договор;
	 * Contract information. Data is presented as key-value pairs list.
	 * Possible contract keys:
	 * num - contract number;
	 * unitid - Structure ID of agreement;
	 * own - true-own agreement, false-inherited agreement;
	 * unitname - ancestor structure name if own=false;
	 * datestart - contract date start;
	 * datestop - contract date end;
	 * status - contract status:
	 * CREATED,
	 * SIGNED,
	 * ACTIVE,
	 * PAUSED,
	 * INACTIVE;
	 * type - contract type:
	 * PARTNER - contract,
	 * VIRTUAL - virtual contract;
	 * 
 */


class Contract
{
	
	/**
	 * ID договора
	 * Contract ID
	 * 
	 *
	 * @var long
	 */
	 public $id = null;

	/**
	 * 
	 *
	 * @var KeyValueAttribute
	 */
	 public $attribute = null;

	/**
	 * 
	 *
	 * @param KeyValueAttribute
	 *
	 * @return void
	 */
	public function addAttribute(KeyValueAttribute $item)
	{
		$this->attribute[] = $item;
	}

}

/**
 * Банковские реквизиты в системе МОНЕТА.РУ. Данные представляются в виде "ключ-значение".
	 * Возможные ключи:
	 * is_international - международные банковские реквизиты (true/false);
	 * bank - банк;
	 * bik - БИК;
	 * account - расчетный счет;
	 * corr_bank - корреспондентский банк;
	 * corr_account - корреспондентский счет;
	 * country - страна;
	 * state - регион/республика;
	 * city - город;
	 * kbk - КБК;
	 * oktmo - Общероссийский классификатор территорий муниципальных образований;
	 * kpp - КПП;
	 * Bank account details. Data is presented as key-value pairs list.
	 * Possible keys:
	 * is_international - international bank account details (true/false);
	 * bank - bank;
	 * bik - SWIFT/BIC number;
	 * account - IBAN/settlement account;
	 * corr_bank - correspondent bank;
	 * corr_account - correspondent account;
	 * country - country;
	 * state - region/state;
	 * city - city;
	 * kbk - budget classification code;
	 * oktmo - russian Classification of Objects;
	 * kpp - code reason for registration;
	 * 
 */


class BankAccount
{
	
	/**
	 * ID банковских реквизитов
	 * Bank account ID
	 * 
	 *
	 * @var long
	 */
	 public $id = null;

	/**
	 * 
	 *
	 * @var KeyValueAttribute
	 */
	 public $attribute = null;

	/**
	 * 
	 *
	 * @param KeyValueAttribute
	 *
	 * @return void
	 */
	public function addAttribute(KeyValueAttribute $item)
	{
		$this->attribute[] = $item;
	}

}

/**
 * Юридические реквизиты в системе МОНЕТА.РУ. Данные представляются в виде "ключ-значение".
	 * Возможные ключи:
	 * inn - ИНН;
	 * kpp - КПП;
	 * ogrn - ОГРН;
	 * ogrnip - ОГРНИП;
	 * okpo - ОКПО;
	 * okved - ОКВЭД;
	 * Legal information. Data is presented as key-value pairs list.
	 * Possible keys:
	 * inn;
	 * kpp;
	 * ogrn;
	 * ogrnip;
	 * okpo;
	 * okved;
	 * 
 */


class LegalInformation
{
	
	/**
	 * ID юридических реквизитов
	 * Legal information ID
	 * 
	 *
	 * @var long
	 */
	 public $id = null;

	/**
	 * 
	 *
	 * @var KeyValueAttribute
	 */
	 public $attribute = null;

	/**
	 * 
	 *
	 * @param KeyValueAttribute
	 *
	 * @return void
	 */
	public function addAttribute(KeyValueAttribute $item)
	{
		$this->attribute[] = $item;
	}

}

/**
 * Тип, описывающий документ в системе МОНЕТА.РУ
	 * Document information type
	 * 
 */


class Document
{
	
	/**
	 * Идентификатор документа в системе МОНЕТА.РУ
	 * Document identificator in MONETA.RU
	 * 
	 *
	 * @var long
	 */
	 public $id = null;

	/**
	 * Тип документа
	 * Document type
	 * 
	 *
	 * @var string
	 */
	 public $type = null;

	/**
	 * Поля документа в системе МОНЕТА.РУ.
	 * Данные представляются в виде "ключ-значение" и признака подтвержденности.
	 * В зависимости от типа документа возвращаются следующие поля:
	 * Для документов типа PASSPORT, MILITARY_ID:
	 * SERIES - серия документа
	 * NUMBER - номер документа
	 * ISSUER - кем выдан документ
	 * ISSUED - когда выдан документ
	 * COMMENTS - комментарии (необязательное поле)
	 * Для документов типа DRIVING_LICENCE:
	 * SERIES - серия документа
	 * NUMBER - номер документа
	 * ISSUER - кем выдан документ
	 * ISSUED - когда выдан документ
	 * EXPIRATIONDATE - срок действия
	 * COMMENTS - комментарии (необязательное поле)
	 * Для OTHER:
	 * COMMENTS - комментарии, пояснения, описание
	 * Для всех типов документов:
	 * customfield:* - произвольный набор значений.
	 * В документе их может быть несколько.
	 * Полный ключ атрибута состоит из префикса ("customfield:") и тэга (32 символа).
	 * Например, "customfield:name".
	 * MODIFICATIONDATE - последняя дата редактирования документа
	 * Document attributes in MONETA.RU.
	 * Information is represented by key-value pairs list.
	 * Supported keys depending on document type as follows.
	 * PASSPORT, MILITARY_ID document type:
	 * SERIES - document series
	 * NUMBER - document number
	 * ISSUER - document issuer
	 * ISSUED - document issuance date
	 * COMMENTS - optional description
	 * DRIVING_LICENCE document type:
	 * SERIES - document series
	 * NUMBER - document number
	 * ISSUER - document issuer
	 * ISSUED - document issuance date
	 * EXPIRATIONDATE - expiration date
	 * COMMENTS - optional description
	 * OTHER document type:
	 * COMMENTS - name, description, comments or explanation
	 * all document types:
	 * customfield:* - custom list of values.
	 * The document may contain several attributes with different keys.
	 * The full attribute's key consists of prefix ("customfield:") and tag (32 characters).
	 * For example, "customfield:name".
	 * MODIFICATIONDATE - document last modification date
	 * 
	 *
	 * @var KeyValueAttribute
	 */
	 public $attribute = null;

	/**
	 * Поля документа в системе МОНЕТА.РУ.
	 * Данные представляются в виде "ключ-значение" и признака подтвержденности.
	 * В зависимости от типа документа возвращаются следующие поля:
	 * Для документов типа PASSPORT, MILITARY_ID:
	 * SERIES - серия документа
	 * NUMBER - номер документа
	 * ISSUER - кем выдан документ
	 * ISSUED - когда выдан документ
	 * COMMENTS - комментарии (необязательное поле)
	 * Для документов типа DRIVING_LICENCE:
	 * SERIES - серия документа
	 * NUMBER - номер документа
	 * ISSUER - кем выдан документ
	 * ISSUED - когда выдан документ
	 * EXPIRATIONDATE - срок действия
	 * COMMENTS - комментарии (необязательное поле)
	 * Для OTHER:
	 * COMMENTS - комментарии, пояснения, описание
	 * Для всех типов документов:
	 * customfield:* - произвольный набор значений.
	 * В документе их может быть несколько.
	 * Полный ключ атрибута состоит из префикса ("customfield:") и тэга (32 символа).
	 * Например, "customfield:name".
	 * MODIFICATIONDATE - последняя дата редактирования документа
	 * Document attributes in MONETA.RU.
	 * Information is represented by key-value pairs list.
	 * Supported keys depending on document type as follows.
	 * PASSPORT, MILITARY_ID document type:
	 * SERIES - document series
	 * NUMBER - document number
	 * ISSUER - document issuer
	 * ISSUED - document issuance date
	 * COMMENTS - optional description
	 * DRIVING_LICENCE document type:
	 * SERIES - document series
	 * NUMBER - document number
	 * ISSUER - document issuer
	 * ISSUED - document issuance date
	 * EXPIRATIONDATE - expiration date
	 * COMMENTS - optional description
	 * OTHER document type:
	 * COMMENTS - name, description, comments or explanation
	 * all document types:
	 * customfield:* - custom list of values.
	 * The document may contain several attributes with different keys.
	 * The full attribute's key consists of prefix ("customfield:") and tag (32 characters).
	 * For example, "customfield:name".
	 * MODIFICATIONDATE - document last modification date
	 * 
	 *
	 * @param KeyValueAttribute
	 *
	 * @return void
	 */
	public function addAttribute(KeyValueAttribute $item)
	{
		$this->attribute[] = $item;
	}

	/**
	 * Имеет ли документ прикрепленные файлы.
	 * Для получения прикрепленных файлов используйте вызов FindProfileDocumentFilesRequest
	 * If the document has attachments or not.
	 * For attachment fetching see FindProfileDocumentFilesRequest
	 * 
	 *
	 * @var boolean
	 */
	 public $hasAttachedFiles = null;

}

/**
 * Тип, описывающий данные в виде бинарного файла.
	 * Binary data type.
	 * 
 */


class File
{
	
	/**
	 * ID документа, которому принадлежит данный файл
	 * Document ID, which file belongs to
	 * 
	 *
	 * @var long
	 */
	 public $documentId = null;

	/**
	 * Данные файла. При передаче/получении данных используйте MTOM (Message Transmission Optimization Mechanism).
	 * File contents. Use MTOM (Message Transmission Optimization Mechanism).
	 * 
	 *
	 * @var base64Binary
	 */
	 public $blob = null;

	/**
	 * Проверен или нет данный файл
	 * Is file approved or not
	 * 
	 *
	 * @var boolean
	 */
	 public $approved = null;

	/**
	 * ID файла
	 * File Id
	 * 
	 *
	 * @var long
	 */
	 public $fileId = null;

	/**
	 * Mime type файла (например: image/jpeg)
	 * File mime type (example: image/jpeg)
	 * 
	 *
	 * @var string
	 */
	 public $mimeType = null;

	/**
	 * Имя файла или описание
	 * File name or description
	 * 
	 *
	 * @var string
	 */
	 public $title = null;

}

/**
 * Тип, описывающий делегированный доступ к счету.
	 * Type describing access to delegated account.
	 * 
 */


class AccountRelation
{
	
	/**
	 * Номер счета в системе МОНЕТА.РУ.
	 * Account number.
	 * 
	 *
	 * @var long
	 */
	 public $accountId = null;

	/**
	 * Email пользователя, которому предоставляется делегированный доступ к счету.
	 * Email of user which has to be provided with delegated account access.
	 * 
	 *
	 * @var string
	 */
	 public $principalEmail = null;

	/**
	 * Просмотр счета.
	 * View account.
	 * 
	 *
	 * @var boolean
	 */
	 public $canViewAccount = null;

	/**
	 * Редактирование счета.
	 * Edit account.
	 * 
	 *
	 * @var boolean
	 */
	 public $canEditAccount = null;

	/**
	 * Проведение операций.
	 * Process operations.
	 * 
	 *
	 * @var boolean
	 */
	 public $canProcessOperation = null;

}

/**
 * Выставление счета к оплате.
	 * Making new invoice (request for payment).
	 * 
 */


class InvoiceRequest extends InvoiceRequestType
{
	
}

/**
 * Выставление счета к оплате в пакетном режиме.
	 * Making new invoice (request for payment) in batch processing mode.
	 * 
 */


class InvoiceBatchRequest extends InvoiceBatchRequestType
{
	
}

/**
 * Ответ на выставление счета к оплате в пакетном режиме.
	 * Invoice registration response in batch processing mode.
	 * 
 */


class InvoiceBatchResponse
{
	
	/**
	 * Детали проведенных операций, либо описание ошибок, если операция не проведена.
	 * Порядок соответствует набору операций, переданных в InvoiceBatchRequest.
	 * Either transaction details or error description in order of appearance in corresponding request.
	 * 
	 *
	 * @var TransactionBatchResponseType
	 */
	 public $transaction = null;

	/**
	 * Детали проведенных операций, либо описание ошибок, если операция не проведена.
	 * Порядок соответствует набору операций, переданных в InvoiceBatchRequest.
	 * Either transaction details or error description in order of appearance in corresponding request.
	 * 
	 *
	 * @param TransactionBatchResponseType
	 *
	 * @return void
	 */
	public function addTransaction(TransactionBatchResponseType $item)
	{
		$this->transaction[] = $item;
	}

}

/**
 * Ответ на выставление счета к оплате.
	 * Invoice registration response.
	 * 
 */


class InvoiceResponse extends TransactionResponseType
{
	
}

/**
 * Запрос на перевод денежных средств.
	 * Money Transfer Request.
	 * 
 */


class TransferRequest extends TransactionRequestType
{
	
}

/**
 * Ответ на запрос перевода денежных средств.
	 * Money transfer registration response.
	 * 
 */


class TransferResponse extends TransactionResponseType
{
	
}

/**
 * Запрос на перевод денежных средств в пакетном режиме.
	 * Money Transfer Request in batch processing mode.
	 * 
 */


class TransferBatchRequest extends TransactionBatchRequestType
{
	
}

/**
 * Ответ на запрос перевода денежных средств в пакетном режиме.
	 * Money transfer registration response in batch processing mode.
	 * 
 */


class TransferBatchResponse
{
	
	/**
	 * Детали проведенных операций, либо описание ошибок, если операция не проведена.
	 * Порядок соответствует набору операций, переданных в TransferBatchRequest.
	 * Either transaction details or error description in order of appearance in corresponding request.
	 * 
	 *
	 * @var TransactionBatchResponseType
	 */
	 public $transaction = null;

	/**
	 * Детали проведенных операций, либо описание ошибок, если операция не проведена.
	 * Порядок соответствует набору операций, переданных в TransferBatchRequest.
	 * Either transaction details or error description in order of appearance in corresponding request.
	 * 
	 *
	 * @param TransactionBatchResponseType
	 *
	 * @return void
	 */
	public function addTransaction(TransactionBatchResponseType $item)
	{
		$this->transaction[] = $item;
	}

}

/**
 * Запрос на перевод денежных средств. Отличается от TransferRequest тем, что в качестве получателя можно указывать не только номер счета.
	 * Money Transfer Request. The difference from TransferRequest is that payee may be addressed not only by account number rather than transaction ID, e-mail address or phone number.
	 * 
 */


class PaymentRequest extends PaymentRequestType
{
	
}

/**
 * Ответ на запрос перевода денежных средств.
	 * Money transfer registration response.
	 * 
 */


class PaymentResponse extends OperationInfo
{
	
}

/**
 * Запрос на перевод денежных средств в пакетном режиме.
	 * Money Transfer Request in batch processing mode.
	 * 
 */


class PaymentBatchRequest extends PaymentBatchRequestType
{
	
}

/**
 * Ответ на запрос перевода денежных средств в пакетном режиме.
	 * Money transfer registration response in batch processing mode.
	 * 
 */


class PaymentBatchResponse
{
	
	/**
	 * Детали проведенных операций, либо описание ошибок, если операция не проведена.
	 * Порядок соответствует набору операций, переданных в PaymentBatchRequest.
	 * Either transaction details or error description in order of appearance in corresponding request.
	 * 
	 *
	 * @var OperationInfoBatchResponseType
	 */
	 public $transaction = null;

	/**
	 * Детали проведенных операций, либо описание ошибок, если операция не проведена.
	 * Порядок соответствует набору операций, переданных в PaymentBatchRequest.
	 * Either transaction details or error description in order of appearance in corresponding request.
	 * 
	 *
	 * @param OperationInfoBatchResponseType
	 *
	 * @return void
	 */
	public function addTransaction(OperationInfoBatchResponseType $item)
	{
		$this->transaction[] = $item;
	}

}

/**
 * Запрос на регистрацию операции с блокировкой средств на счете плательщика.
	 * Завершить (подтвердить) операцию можно с помощью ConfirmTransactionRequest.
	 * Если операция не будет закончена с помощью ConfirmTransactionRequest, то
	 * операция будет отменена автоматически по истечению срока блокировки.
	 * Request for transaction registration and debiting funds from payer's account.
	 * To finish (confirm) this transaction use ConfirmTransactionRequest.
	 * Authorised but not cofirmed transactions are cancelled automaticaly after authorisation expiry.
	 * 
 */


class AuthoriseTransactionRequest extends AuthoriseTransactionRequestType
{
	
}

/**
 * Ответ на запрос регистрации операции.
	 * Transaction authorisation response.
	 * 
 */


class AuthoriseTransactionResponse extends OperationInfo
{
	
}

/**
 * Запрос на регистрацию операции с блокировкой средств на счете плательщика в пакетном режиме.
	 * Request for transactions registration and debiting funds from payer's account in batch processing mode.
	 * 
 */


class AuthoriseTransactionBatchRequest extends AuthoriseTransactionBatchRequestType
{
	
}

/**
 * Ответ на запрос регистрации операций в пакетном режиме.
	 * Transactions authorisation response in batch processing mode.
	 * 
 */


class AuthoriseTransactionBatchResponse
{
	
	/**
	 * Детали проведенных операций, либо описание ошибок, если операция не проведена.
	 * Порядок соответствует набору операций, переданных в AuthoriseTransactionBatchRequest.
	 * Either transaction details or error description in order of appearance in corresponding request.
	 * 
	 *
	 * @var OperationInfoBatchResponseType
	 */
	 public $transaction = null;

	/**
	 * Детали проведенных операций, либо описание ошибок, если операция не проведена.
	 * Порядок соответствует набору операций, переданных в AuthoriseTransactionBatchRequest.
	 * Either transaction details or error description in order of appearance in corresponding request.
	 * 
	 *
	 * @param OperationInfoBatchResponseType
	 *
	 * @return void
	 */
	public function addTransaction(OperationInfoBatchResponseType $item)
	{
		$this->transaction[] = $item;
	}

}

/**
 * Запрос на завершение (подтверждение) операции.
	 * Transaction confirmation request.
	 * 
 */


class ConfirmTransactionRequest extends ConfirmTransactionRequestType
{
	
}

/**
 * Ответ на запрос завершения операции.
	 * Transaction confirmation response.
	 * 
 */


class ConfirmTransactionResponse extends OperationInfo
{
	
}

/**
 * Запрос на завершение (подтверждение) операций в пакетном режиме.
	 * Transactions confirmation request in batch processing mode.
	 * 
 */


class ConfirmTransactionBatchRequest extends ConfirmTransactionBatchRequestType
{
	
}

/**
 * Ответ на запрос завершения операций в пакетном режиме.
	 * Transactions confirmation response in batch processing mode.
	 * 
 */


class ConfirmTransactionBatchResponse
{
	
	/**
	 * Детали проведенных операций, либо описание ошибок, если операция не проведена.
	 * Порядок соответствует набору операций, переданных в ConfirmTransactionBatchRequest.
	 * Either transaction details or error description in order of appearance in corresponding request.
	 * 
	 *
	 * @var OperationInfoBatchResponseType
	 */
	 public $transaction = null;

	/**
	 * Детали проведенных операций, либо описание ошибок, если операция не проведена.
	 * Порядок соответствует набору операций, переданных в ConfirmTransactionBatchRequest.
	 * Either transaction details or error description in order of appearance in corresponding request.
	 * 
	 *
	 * @param OperationInfoBatchResponseType
	 *
	 * @return void
	 */
	public function addTransaction(OperationInfoBatchResponseType $item)
	{
		$this->transaction[] = $item;
	}

}

/**
 * Запрос на отмену операции. Отменять операцию можно при выполнении всех условий:
	 * незавершенные операции;
	 * если есть доступ к счету плательщика и счету получателя (то есть свои внутренние операции).
	 * Transaction cancelation request if transasction fulfils following conditions:
	 * transaction is in processing (incompleted);
	 * principal has an access to both (payer and payee) accounts.
	 * 
 */


class CancelTransactionRequest extends CancelTransactionRequestType
{
	
}

/**
 * Ответ на запрос CancelTransactionRequest.
	 * Transaction cancelation response.
	 * 
 */


class CancelTransactionResponse extends CancelTransactionResponseType
{
	
}

/**
 * Запрос на отмену операций в пакетном режиме.
	 * Transactions cancelation request in batch processing mode.
	 * 
 */


class CancelTransactionBatchRequest extends CancelTransactionBatchRequestType
{
	
}

/**
 * Ответ на запрос CancelTransactionBatchRequest.
	 * Transactions cancelation response in batch processing mode.
	 * 
 */


class CancelTransactionBatchResponse
{
	
	/**
	 * Детали проведенных операций, либо описание ошибок, если операция не проведена.
	 * Порядок соответствует набору операций, переданных в CancelTransactionBatchRequest.
	 * Either transaction details or error description in order of appearance in corresponding request.
	 * 
	 *
	 * @var CancelTransactionBatchResponseType
	 */
	 public $transaction = null;

	/**
	 * Детали проведенных операций, либо описание ошибок, если операция не проведена.
	 * Порядок соответствует набору операций, переданных в CancelTransactionBatchRequest.
	 * Either transaction details or error description in order of appearance in corresponding request.
	 * 
	 *
	 * @param CancelTransactionBatchResponseType
	 *
	 * @return void
	 */
	public function addTransaction(CancelTransactionBatchResponseType $item)
	{
		$this->transaction[] = $item;
	}

}

/**
 * Возврат средств по указанной операции.
	 * Refund given transaction.
	 * 
 */


class RefundRequest
{
	
	/**
	 * Номер операции в системе МОНЕТА.РУ, по которой необходимо вернуть деньги
	 * Transaction ID in Moneta.ru
	 * 
	 *
	 * @var long
	 */
	 public $transactionId = null;

	/**
	 * Сумма, которую необходимо возвратить.
	 * Если сумма не указана, то сумма для возврата берется из указанной операции.
	 * Необязательное поле.
	 * Amount to refund in source transaction payee's currency.
	 * If omitted the source transaction payees' amount is used.
	 * Optional.
	 * 
	 *
	 * @var decimal
	 */
	 public $amount = null;

	/**
	 * Платежный пароль
	 * Payment password for payer account
	 * 
	 *
	 * @var normalizedString
	 */
	 public $paymentPassword = null;

	/**
	 * Внешний номер операции
	 * External transaction ID
	 * 
	 *
	 * @var string
	 */
	 public $clientTransaction = null;

	/**
	 * Описание операции
	 * Transaction description or comments
	 * 
	 *
	 * @var normalizedString
	 */
	 public $description = null;

	/**
	 * Набор полей, которые необходимо сохранить в качестве атрибутов операции. Значения дат в формате dd.MM.yyyy HH:mm:ss
	 * Key-value pairs that will be saved as a transaction attributes. Use format dd.MM.yyyy HH:mm:ss for date values
	 * 
	 *
	 * @var OperationInfo
	 */
	 public $operationInfo = null;

	/**
	 * Запрос для платежного пароля
	 * Payment password challenge
	 * 
	 *
	 * @var string
	 */
	 public $paymentPasswordChallenge = null;

}

/**
 * Ответ по запросу возврата средств, содержащий информацию по возвратной операции.
	 * Response containing refund transaction information.
	 * 
 */


class RefundResponse extends OperationInfo
{
	
}

/**
 * Запрос предварительного расчета сумм и комиссий по параметрам операции.
	 * Request for amount and fee preliminary calculation by transaction parameters.
	 * 
 */


class ForecastTransactionRequest extends TransactionRequestType
{
	
}

/**
 * Ответ на запрос предварительного расчета сумм и комиссий.
	 * Может использоваться для информирования пользователя о приблизительной сумме и комиссии
	 * операции.
	 * Фактические значения могут отличаться, если к моменту проведения операции
	 * доступны новые правила тарификации или новые курсы обмена валют.
	 * Response for preliminary calculation request.
	 * May be used for informing users with approximate amount and fee of transaction.
	 * Actual values may differ if newer financial rules and currency exchange rates
	 * are available at the moment of transaction processing.
	 * 
 */


class ForecastTransactionResponse extends ForecastTransactionResponseType
{
	
}

/**
 * Запрос возможности провести операцию в системе МОНЕТА.РУ.
	 * Transaction verification request.
	 * 
 */


class VerifyTransactionRequest extends Entity
{
	
	/**
	 * Идентификатор операции в системе МОНЕТА.РУ, которую надо проверить.
	 * The identifier of transaction which has to be verified.
	 * 
	 *
	 * @var long
	 */
	 public $transactionId = null;

	/**
	 * Номер счета плательщика
	 * Payer account number
	 * 
	 *
	 * @var string
	 */
	 public $payer = null;

	/**
	 * Сумма операции.
	 * Если флаг isPayerAmount отсутствует
	 * и пользователь имеет доступ только к счету плательщика,
	 * то интерпретируется как сумма к списанию (в валюте плательщика).
	 * Если флаг isPayerAmount отсутствует
	 * и пользователь имеет доступ только к счету получателя,
	 * то интерпретируется как сумма к зачислению (в валюте получателя).
	 * Transaction amount.
	 * If isPayerAmount is omitted
	 * and user has access only to payer account,
	 * then is interpreted as debit amount (in payer's currency).
	 * If isPayerAmount is omitted
	 * and user has access only to payee account,
	 * then is interpreted as credit amount (in payee's currency).
	 * 
	 *
	 * @var decimal
	 */
	 public $amount = null;

	/**
	 * Если пользователь имеет доступ как к счету плательщика, так и счету получателя,
	 * то флаг isPayerAmount обязателен.
	 * Если флаг isPayerAmount установлен (true), то amount используется как сумма к списанию (в валюте плательщика).
	 * Если флаг isPayerAmount сброшен (false), то amount используется как сумма к зачислению (в валюте получателя).
	 * If user has access to both accounts, then isPayerAmount flag is obligatory.
	 * If isPayerAmount flag is "true", then amount is used as debit amount (in payer's currency).
	 * If isPayerAmount flag is "false", then amount is used as credit amount (in payee's currency).
	 * 
	 *
	 * @var boolean
	 */
	 public $isPayerAmount = null;

	/**
	 * Набор полей, которые необходимо использовать в качестве атрибутов операции. Значения дат в формате dd.MM.yyyy HH:mm:ss
	 * Key-value pairs that will be used as a transaction attributes. Use format dd.MM.yyyy HH:mm:ss for date values
	 * 
	 *
	 * @var OperationInfo
	 */
	 public $operationInfo = null;

	/**
	 * Платежный пароль счета плательщика
	 * Payment password for payer account
	 * 
	 *
	 * @var normalizedString
	 */
	 public $paymentPassword = null;

	/**
	 * Запрос для платежного пароля
	 * Payment password challenge
	 * 
	 *
	 * @var string
	 */
	 public $paymentPasswordChallenge = null;

	/**
	 * Внешний номер операции
	 * External transaction ID
	 * 
	 *
	 * @var string
	 */
	 public $clientTransaction = null;

}

/**
 * Ответ на запрос проверки проведения операции в системе МОНЕТА.РУ
	 * Transaction verification response.
	 * 
 */


class VerifyTransactionResponse extends VerifyTransactionResponseType
{
	
}

/**
 * Запрос возможности провести операцию в системе МОНЕТА.РУ.
	 * Transaction verification request.
	 * 
 */


class VerifyTransferRequest extends TransactionRequestType
{
	
}

/**
 * Ответ на запрос проверки проведения операции в системе МОНЕТА.РУ
	 * Transaction verification response.
	 * 
 */


class VerifyTransferResponse extends VerifyTransferResponseType
{
	
}

/**
 * Запрос возможности провести операцию в системе МОНЕТА.РУ. Отличается от VerifyTransferRequest тем, что в качестве получателя можно указывать не только номер счета.
	 * Transaction verification request. The difference from VerifyTransferRequest is that payee may be addressed not only by account number rather than transaction ID, e-mail address or phone number.
	 * 
 */


class VerifyPaymentRequest extends PaymentRequestType
{
	
}

/**
 * Ответ на запрос проверки проведения операции в системе МОНЕТА.РУ
	 * Transaction verification response.
	 * 
 */


class VerifyPaymentResponse extends VerifyTransactionResponseType
{
	
}

/**
 * Ответ, который приходит на запрос FindAccountByIdRequest.
	 * В ответе содержится информация по счету.
	 * Account searching by account number response.
	 * Response contains Account information.
	 * 
 */


class FindAccountByIdResponse
{
	
	/**
	 * 
	 *
	 * @var AccountInfo
	 */
	 public $account = null;

}

/**
 * Ответ, который приходит на запрос FindAccountByAliasRequest.
	 * В ответе содержится информация по счету.
	 * Account searching by account alias response.
	 * Response contains Account information.
	 * 
 */


class FindAccountByAliasResponse
{
	
	/**
	 * 
	 *
	 * @var AccountInfo
	 */
	 public $account = null;

}

/**
 * Запрос на получение списка счетов по заданным условиям поиска.
	 * Accounts searching by given filter.
	 * 
 */


class FindAccountsListRequest extends Entity
{
	
	/**
	 * Пользователь, которому принадлежат счета.
	 * Если это поле не задано, то используется текущий пользователь.
	 * Необязательное поле.
	 * Structure element, where accounts belong to.
	 * If omitted authenticated user's structure is used.
	 * Optional.
	 * 
	 *
	 * @var long
	 */
	 public $unitId = null;

	/**
	 * Название счета. Поиск происходит по прямому совпадению.
	 * Для задания маски можно указать спец-символы "*" или "?".
	 * Необязательное поле.
	 * Alias of account. Wildcards "*" and "?" may be used.
	 * Optional.
	 * 
	 *
	 * @var string
	 */
	 public $alias = null;

	/**
	 * Валюта счета. Необязательное поле.
	 * Currency of account. Optional.
	 * 
	 *
	 * @var string
	 */
	 public $currency = null;

	/**
	 * Является ли счет делегированным. Необязательное поле.
	 * - поле не указано - выбрать все счета
	 * - false - выбрать только неделегированные счета
	 * - true - выбрать только делегированные счета
	 * The boolean flag indicating if account is deligated. Optional.
	 * - select all accounts if omitted
	 * - false - select only non-delegated (owned) accounts
	 * - true - select only delegated accounts
	 * 
	 *
	 * @var boolean
	 */
	 public $isDelegatedAccount = null;

}

/**
 * Ответ, который содержит список счетов.
	 * Accounts searching response containing the list of accounts.
	 * 
 */


class FindAccountsListResponse
{
	
	/**
	 * 
	 *
	 * @var AccountInfo
	 */
	 public $account = null;

	/**
	 * 
	 *
	 * @param AccountInfo
	 *
	 * @return void
	 */
	public function addAccount(AccountInfo $item)
	{
		$this->account[] = $item;
	}

}

/**
 * Получить запрос для платежного пароля
	 * Receive challenge for payment password
	 * 
 */


class GetAccountPaymentPasswordChallengeRequest
{
	
	/**
	 * Номер счета
	 * Account number
	 * 
	 *
	 * @var long
	 */
	 public $accountId = null;

}

/**
 * Ответ содержит строку запроса для платежного пароля
	 * Response contains of challenge string for payment password
	 * 
 */


class GetAccountPaymentPasswordChallengeResponse
{
	
	/**
	 * Запрос для платежного пароля
	 * Challenge of payment password
	 * 
	 *
	 * @var string
	 */
	 public $paymentPasswordChallenge = null;

}

/**
 * Запрос на создание счета.
	 * Счет создается для указанного пользователя или,
	 * если это поле не указано, - для текущего пользователя.
	 * Account creation request.
	 * Account is created for given structure element (unitId)
	 * or for authenticated user's structure if unitId is omitted.
	 * 
 */


class CreateAccountRequest
{
	
	/**
	 * Валюта счета
	 * Currency of account
	 * 
	 *
	 * @var string
	 */
	 public $currency = null;

	/**
	 * Название счета.
	 * Название счета должно быть уникальным среди счетов одного пользователя.
	 * Необязательное поле.
	 * Alias of account.
	 * Must be unique among accounts of given user.
	 * Optional.
	 * 
	 *
	 * @var string
	 */
	 public $alias = null;

	/**
	 * Платежный пароль. Минимальная длина - 5 символов
	 * Payment password. Minimum length is 5 symbols.
	 * 
	 *
	 * @var string
	 */
	 public $paymentPassword = null;

	/**
	 * Пользователь, которому будет принадлежать данный счет.
	 * Если это поле не задано, то счет создается для текущего пользователя.
	 * Необязательное поле.
	 * Structure element, where the account belongs to.
	 * If omitted authenticated user's structure is used.
	 * Optional.
	 * 
	 *
	 * @var long
	 */
	 public $unitId = null;

	/**
	 * URL после списания средств. Необязательное поле.
	 * URL on debiting. Optional.
	 * 
	 *
	 * @var string
	 */
	 public $onSuccessfulDebitUrl = null;

	/**
	 * URL после зачисления средств. Необязательное поле.
	 * URL on crediting. Optional.
	 * 
	 *
	 * @var string
	 */
	 public $onSuccessfulCreditUrl = null;

	/**
	 * Код проверки целостности данных. Необязательное поле.
	 * Mandatory payment form signature. Optional.
	 * 
	 *
	 * @var string
	 */
	 public $signature = null;

	/**
	 * Если баланс счета меньше данного значения, то раз в сутки уходит уведомление об этом событии. Необязательное поле.
	 * Daily notifications if balance is less than threshold. Optional.
	 * 
	 *
	 * @var decimal
	 */
	 public $lowBalanceThreshold = null;

	/**
	 * Если баланс счета больше данного значения, то раз в сутки уходит уведомление об этом событии. Необязательное поле.
	 * Daily notifications if balance is greater than threshold. Optional.
	 * 
	 *
	 * @var decimal
	 */
	 public $highBalanceThreshold = null;

	/**
	 * Счет-прототип с которого берутся свойства "по умолчанию". Необязательное поле.
	 * Prototype account for default properties values. Optional.
	 * 
	 *
	 * @var long
	 */
	 public $prototypeAccountId = null;

	/**
	 * URL после отмены списания средств. Необязательное поле.
	 * URL on cancelled debit. Optional.
	 * 
	 *
	 * @var string
	 */
	 public $onCancelledDebitUrl = null;

	/**
	 * URL после отмены зачисления средств. Необязательное поле.
	 * URL on cancelled credit. Optional.
	 * 
	 *
	 * @var string
	 */
	 public $onCancelledCreditUrl = null;

}

/**
 * Запрос на редактирование счета.
	 * У счета можно изменить свойства "псевдоним" и "платежный пароль".
	 * Account modification request.
	 * It's allowed to change alias and payment password for account.
	 * 
 */


class EditAccountRequest
{
	
	/**
	 * Идентификатор редактируемого счета.
	 * Modifying account's number.
	 * 
	 *
	 * @var long
	 */
	 public $id = null;

	/**
	 * Новый псевдоним счета.
	 * Псевдоним счета должен быть уникальным среди счетов пользователя.
	 * Необязательное поле.
	 * New alias of account.
	 * Must be unique among accounts of given user.
	 * Optional.
	 * 
	 *
	 * @var string
	 */
	 public $alias = null;

	/**
	 * Новый платежный пароль. Для того чтобы изменить платежный
	 * пароль, необходимо указать предыдущий платежный пароль. Необязательное поле.
	 * New payment password for account.
	 * oldPaymentPassword is required to set new payment password.
	 * Optional.
	 * 
	 *
	 * @var string
	 */
	 public $paymentPassword = null;

	/**
	 * Текущий платежный пароль. Для того чтобы изменить платежный
	 * пароль на новый, необходимо указать текущий платежный пароль. Необязательное поле.
	 * Current payment password.
	 * Used for authorization of changing payment password to new value.
	 * Required only if newPaymentPassword is specified.
	 * Optional.
	 * 
	 *
	 * @var string
	 */
	 public $oldPaymentPassword = null;

	/**
	 * URL после списания средств. Необязательное поле.
	 * URL on debiting. Optional.
	 * 
	 *
	 * @var string
	 */
	 public $onSuccessfulDebitUrl = null;

	/**
	 * URL после зачисления средств. Необязательное поле.
	 * URL on crediting. Optional.
	 * 
	 *
	 * @var string
	 */
	 public $onSuccessfulCreditUrl = null;

	/**
	 * Код проверки целостности данных. Необязательное поле.
	 * Mandatory payment form signature. Optional.
	 * 
	 *
	 * @var string
	 */
	 public $signature = null;

	/**
	 * Если баланс счета меньше данного значения, то раз в сутки уходит уведомление об этом событии. Необязательное поле.
	 * Daily notifications if balance is less than threshold. Optional.
	 * 
	 *
	 * @var decimal
	 */
	 public $lowBalanceThreshold = null;

	/**
	 * Если баланс счета больше данного значения, то раз в сутки уходит уведомление об этом событии. Необязательное поле.
	 * Daily notifications if balance is greater than threshold. Optional.
	 * 
	 *
	 * @var decimal
	 */
	 public $highBalanceThreshold = null;

	/**
	 * Счет-прототип с которого берутся свойства "по умолчанию". Необязательное поле.
	 * Prototype account for default properties values. Optional.
	 * 
	 *
	 * @var long
	 */
	 public $prototypeAccountId = null;

	/**
	 * Запрос для платежного пароля
	 * Payment password challenge
	 * 
	 *
	 * @var string
	 */
	 public $oldPaymentPasswordChallenge = null;

	/**
	 * URL после отмены списания средств. Необязательное поле.
	 * URL on cancelled debit. Optional.
	 * 
	 *
	 * @var string
	 */
	 public $onCancelledDebitUrl = null;

	/**
	 * URL после отмены зачисления средств. Необязательное поле.
	 * URL on cancelled credit. Optional.
	 * 
	 *
	 * @var string
	 */
	 public $onCancelledCreditUrl = null;

}

/**
 * Ответ, который приходит на запрос EditAccountRequest.
	 * В ответе нет никаких данных.
	 * Если в процессе сохранения счета произошла ошибка, то возникнет Exception.
	 * Если Exception не возник - значит счет гарантированно сохранен.
	 * Account modification response.
	 * Response contains no data unless some error has occured while modification.
	 * If reponse has no Exception then account is modified successfully.
	 * 
 */


class EditAccountResponse
{
	
}

/**
 * Ответ на запрос получения информации по операции.
	 * Transaction information response.
	 * 
 */


class GetOperationDetailsByIdResponse
{
	
	/**
	 * 
	 *
	 * @var OperationInfo
	 */
	 public $operation = null;

}

/**
 * Запрос на получение данных по внешнему номеру операции
	 * (номеру не в системе МОНЕТА.РУ).
	 * По внешнему номеру операции может быть найдено несколько операций
	 * в системе МОНЕТА.РУ. Поэтому операции возвращаются списком,
	 * разбитым на страницы. Размером страницы можно управлять через
	 * поле pager.
	 * Если данные не найдены, то size в ответе равен 0.
	 * Transaction searching by external transaction ID.
	 * As a result more than one transaction may be found.
	 * Transaction list is paged.
	 * Response element "size" is 0 if no data found.
	 * 
 */


class FindOperationsListByCTIDRequest
{
	
	/**
	 * Настройки страницы данных.
	 * Необязательное поле.
	 * Long list retrieval settings.
	 * Optional.
	 * 
	 *
	 * @var Pager
	 */
	 public $pager = null;

	/**
	 * Номер счета в системе МОНЕТА.РУ
	 * Account number in MONETA.RU
	 * 
	 *
	 * @var long
	 */
	 public $accountId = null;

	/**
	 * Внешний номер операции
	 * External transaction ID
	 * 
	 *
	 * @var string
	 */
	 public $clientTransaction = null;

}

/**
 * Ответ на запрос FindOperationsListByCTIDRequest.
	 * В результате возвращается список операций, разбитый по страницам.
	 * Transaction searching by external transaction ID response.
	 * Result contains paged transaction list.
	 * 
 */


class FindOperationsListByCTIDResponse extends OperationInfoList
{
	
}

/**
 * Фильтр, по которому ищем операции.
	 * Transactions filter.
	 * 
 */


class FindOperationsListRequestFilter
{
	
	/**
	 * ID пользователя в системе МОНЕТА.РУ
	 * Structure identificator in MONETA.RU
	 * 
	 *
	 * @var long
	 */
	 public $unitId = null;

	/**
	 * Номер счета
	 * Account number
	 * 
	 *
	 * @var long
	 */
	 public $accountId = null;

	/**
	 * Дата начала периода
	 * Period's start
	 * 
	 *
	 * @var dateTime
	 */
	 public $dateFrom = null;

	/**
	 * Дата конца периода
	 * Period's end
	 * 
	 *
	 * @var dateTime
	 */
	 public $dateTo = null;

	/**
	 * Номер операции в системе МОНЕТА.РУ
	 * Transaction ID in MONETA.RU
	 * 
	 *
	 * @var long
	 */
	 public $operationId = null;

	/**
	 * Сумма от... Ищутся все операции, которые проходили
	 * на большую или равную сумму. Если указано это поле, то обязательно надо
	 * заполнить Currency
	 * Minimal transaction amount.
	 * If specified currencyCode filter parameter is required.
	 * 
	 *
	 * @var decimal
	 */
	 public $amountFrom = null;

	/**
	 * Сумма до... Ищутся все операции, которые проходили
	 * на меньшую или равную сумму. Если указано это поле, то обязательно надо
	 * заполнить Currency
	 * Maximal transaction amount.
	 * If specified currencyCode filter parameter is required.
	 * 
	 *
	 * @var decimal
	 */
	 public $amountTo = null;

	/**
	 * Валюта, по которой проходили операции
	 * Currency of transaction account.
	 * 
	 *
	 * @var string
	 */
	 public $currencyCode = null;

	/**
	 * Корреспонденский номер счета в системе МОНЕТА.РУ
	 * Correspondent account number in MONETA.RU
	 * 
	 *
	 * @var long
	 */
	 public $targetAccountId = null;

	/**
	 * Статус операции
	 * Transaction status
	 * 
	 *
	 * @var string
	 */
	 public $operationStatus = null;

	/**
	 * Внешний номер операции
	 * External transaction ID
	 * 
	 *
	 * @var string
	 */
	 public $clientTransaction = null;

	/**
	 * 1 - все операции;
	 * 2 - операции, где деньги были получены (сумма > 0);
	 * 3 - операции, где деньги были потрачены (сумма < 0).
	 * 1 - all transactions;
	 * 2 - credit transactions;
	 * 3 - debit transactions.
	 * 
	 *
	 * @var int
	 */
	 public $operationAmountTypeId = null;

	/**
	 * Название свойства операции. Может принимать следующие значения:
	 * YANDEXACCOUNT - счет в системе Яндекс.Деньги;
	 * WEBMONEYWMID - WebMoney WMID;
	 * WEBMONEYPURSE - WebMoney кошелек;
	 * CONTACTTRANSFERORDERNUMBER - Номер перевода в системе Contact;
	 * WIRETRANSFERORDERNUMBER - Номер платежного поручения в банковском переводе;
	 * Значение свойства указывается в поле propertyValue.
	 * The transaction property name may take following values:
	 * YANDEXACCOUNT - user's account number in Yandex.Money;
	 * WEBMONEYWMID - user's WMID in WebMoney;
	 * WEBMONEYPURSE - user's purse number in WebMoney;
	 * CONTACTTRANSFERORDERNUMBER - transfer idenitification number in Contact;
	 * WIRETRANSFERORDERNUMBER - bank transfer identification number.
	 * The value of property has to be specified in "propertyValue" element.
	 * 
	 *
	 * @var string
	 */
	 public $propertyName = null;

	/**
	 * Значение свойства операции.
	 * Поиск происходит по прямому совпадению. Для задания маски
	 * можно указать спец-символы - "*" или "?".
	 * Transaction property value.
	 * Wildcards "*" and "?" may be used.
	 * 
	 *
	 * @var string
	 */
	 public $propertyValue = null;

	/**
	 * 1 - Ввод средств;
	 * 2 - Вывод средств;
	 * 3 - Внутренний перевод;
	 * 4 - Товары и услуги.
	 * 1 - Deposit;
	 * 2 - Withdrawal;
	 * 3 - Transfer;
	 * 4 - Goods and services.
	 * 
	 *
	 * @var long
	 */
	 public $operationCategoryId = null;

	/**
	 * Дата расчетного периода
	 * Accounting period date
	 * 
	 *
	 * @var dateTime
	 */
	 public $accountingPeriodDate = null;

}

/**
 * Запрос на получение списка операций по заданному фильтру.
	 * Обязательными в фильтре являются только поля с датами периода.
	 * Все остальные поля в фильтре необязательные.
	 * Если данные не найдены, то size в ответе равен 0.
	 * Transaction searching by given filter.
	 * Filter requires date period values to be set.
	 * Other parameters are optional.
	 * Response element "size" is 0 if no data found.
	 * 
 */


class FindOperationsListRequest
{
	
	/**
	 * Настройки страницы данных. Необязательное поле.
	 * Paging settings. Optional.
	 * 
	 *
	 * @var Pager
	 */
	 public $pager = null;

	/**
	 * Фильтр, по которому ищем операции.
	 * Transactions filter.
	 * 
	 *
	 * @var FindOperationsListRequestFilter
	 */
	 public $filter = null;

}

/**
 * Ответ на запрос FindOperationsListRequest.
	 * В результате возвращается список операций, разбитый по страницам.
	 * Transaction searching response.
	 * Result contains paged transactions list.
	 * 
 */


class FindOperationsListResponse extends OperationInfoList
{
	
}

/**
 * Запрос на получение списка последних операций.
	 * Если данные не найдены, то size в ответе равен 0.
	 * Last transactions searching.
	 * Response element "size" is 0 if no data found.
	 * 
 */


class FindLastOperationsListRequest
{
	
	/**
	 * ID пользователя в системе МОНЕТА.РУ.
	 * Если это поле не задано, то используется текущий пользователь.
	 * Необязательное поле.
	 * Structure identificator in MONETA.RU.
	 * If omitted authenticated user's structure is used.
	 * Optional.
	 * 
	 *
	 * @var long
	 */
	 public $unitId = null;

	/**
	 * Количество операций. Необязательное поле.
	 * Transactions quantity. Optional.
	 * 
	 *
	 * @var int
	 */
	 public $transactionsQuantity = null;

}

/**
 * Ответ на запрос FindLastOperationsListRequest.
	 * В результате возвращается список последних операций.
	 * Transaction searching response.
	 * Result contains last transactions list.
	 * 
 */


class FindLastOperationsListResponse extends OperationInfoList
{
	
}

/**
 * Получение информации о финансовых потоках.
	 * Если данные не найдены, то size в ответе равен 0.
	 * Financial flow information request.
	 * Response element "size" is 0 if no data found.
	 * 
 */


class GetFinancialFlowsListRequest
{
	
	/**
	 * ID пользователя в системе МОНЕТА.РУ. Если это поле не задано, то используется текущий пользователь. Необязательное поле.
	 * Structure identificator in MONETA.RU. If omitted authenticated user's structure is used. Optional.
	 * 
	 *
	 * @var long
	 */
	 public $unitId = null;

	/**
	 * Дата начала финансового потока. Дата берется с начала указанного месяца.
	 * Financial flow starting date. Only year and month is taken.
	 * 
	 *
	 * @var date
	 */
	 public $dateFrom = null;

	/**
	 * Дата окончания финансового потока.
	 * В дате устанавливается конец указанного месяца.
	 * Если дата не установлена, то берется конец месяца из даты dateFrom.
	 * Период просмотра финансовых потоков не может быть больше 3 месяцев.
	 * Financial flow ending date.
	 * The end of given month is taken.
	 * If omitted the month of "dateFrom" is taken.
	 * The time period between "dateFrom" and "dateTo" is limited to 3 months.
	 * 
	 *
	 * @var date
	 */
	 public $dateTo = null;

	/**
	 * Список счетов, которые учитываются в финансовом потоке
	 * Accounts numbers for financial flow
	 * 
	 *
	 * @var long
	 */
	 public $accountIds = null;

	/**
	 * Список счетов, которые учитываются в финансовом потоке
	 * Accounts numbers for financial flow
	 * 
	 *
	 * @param long
	 *
	 * @return void
	 */
	public function addAccountIds(long $item)
	{
		$this->accountIds[] = $item;
	}

	/**
	 * Валюта, которая учитывается в финансовом потоке
	 * Currency of accounts for financial flow
	 * 
	 *
	 * @var string
	 */
	 public $currencyCode = null;

	/**
	 * Категория операций, которая учитывается в финансовом потоке
	 * Category of operations for financial flow
	 * 
	 *
	 * @var string
	 */
	 public $operationTypeCategory = null;

	/**
	 * Расходные или приходные операции. При отсутствии этого поля учитываются все операции.
	 * Either debits or credits. If omitted, all transfers are considered
	 * 
	 *
	 * @var string
	 */
	 public $operationAmountType = null;

	/**
	 * Если categoryDetails=true, то в ответе делается группировка по категориям операций
	 * If flag is switched on, financial flows will be grouped by its category
	 * 
	 *
	 * @var boolean
	 */
	 public $categoryDetails = null;

	/**
	 * Дополнительные атрибуты запроса
	 * Additional request parameters
	 * 
	 *
	 * @var KeyValueAttribute
	 */
	 public $attribute = null;

	/**
	 * Дополнительные атрибуты запроса
	 * Additional request parameters
	 * 
	 *
	 * @param KeyValueAttribute
	 *
	 * @return void
	 */
	public function addAttribute(KeyValueAttribute $item)
	{
		$this->attribute[] = $item;
	}

	/**
	 * Состояние операций в данном финансовом потоке. Если это поле не установлено - то потоки со всеми состояниями
	 * Financial flow transactions state. All states if this field is empty
	 * 
	 *
	 * @var string
	 */
	 public $operationStatusState = null;

}

/**
 * 
 */


class GetFinancialFlowsListResponseFinancialFlow
{
	
	/**
	 * Дата финансового потока (формат yyyy-mm)
	 * Financial flow date (in yyyy-mm format)
	 * 
	 *
	 * @var string
	 */
	 public $date = null;

	/**
	 * Есть ли доступ к финансовому потоку плательщика
	 * Does user have access to payer financial flow
	 * 
	 *
	 * @var boolean
	 */
	 public $payerSideAccess = null;

	/**
	 * ID финансового потока плательщика
	 * Payer's financial flow ID
	 * 
	 *
	 * @var long
	 */
	 public $payerFlowId = null;

	/**
	 * Название финансового потока плательщика
	 * Payer's financial flow name
	 * 
	 *
	 * @var string
	 */
	 public $payerFlowName = null;

	/**
	 * Валюта финансового потока плательщика
	 * Payer's financial flow currency
	 * 
	 *
	 * @var string
	 */
	 public $payerCurrencyCode = null;

	/**
	 * Есть ли доступ к финансовому потоку получателя
	 * Does user have access to payee financial flow
	 * 
	 *
	 * @var boolean
	 */
	 public $payeeSideAccess = null;

	/**
	 * ID финансового потока получателя
	 * Payee's financial flow ID
	 * 
	 *
	 * @var long
	 */
	 public $payeeFlowId = null;

	/**
	 * Название финансового потока получателя
	 * Payee's financial flow name
	 * 
	 *
	 * @var string
	 */
	 public $payeeFlowName = null;

	/**
	 * Валюта финансового потока получателя
	 * Payee's financial flow currency
	 * 
	 *
	 * @var string
	 */
	 public $payeeCurrencyCode = null;

	/**
	 * Сумма, списанная с плательщика
	 * Amount debited from payer
	 * 
	 *
	 * @var decimal
	 */
	 public $payerDebited = null;

	/**
	 * Сумма, удержанная с плательщика
	 * Withholding fee from debited amount
	 * 
	 *
	 * @var decimal
	 */
	 public $payerWithheld = null;

	/**
	 * Сумма комиссии плательщика
	 * Payer's fee
	 * 
	 *
	 * @var decimal
	 */
	 public $payerFee = null;

	/**
	 * Сумма обменной комиссии плательщика
	 * Payer's exchange fee
	 * 
	 *
	 * @var decimal
	 */
	 public $payerExchangeFee = null;

	/**
	 * Сумма, зачисленная получателю
	 * Amount credited to payee
	 * 
	 *
	 * @var decimal
	 */
	 public $payeeCredited = null;

	/**
	 * Сумма комисии получателя
	 * Payee's fee
	 * 
	 *
	 * @var decimal
	 */
	 public $payeeFee = null;

	/**
	 * Количество операций в данном финансовом потоке
	 * Transactions quantity
	 * 
	 *
	 * @var long
	 */
	 public $transactionsCount = null;

	/**
	 * Категория операций в данном финансовом потоке (возвращается, если в запросе categoryDetails=true)
	 * Financial flow transactions category (if categoryDetails=true in request)
	 * 
	 *
	 * @var string
	 */
	 public $operationTypeCategory = null;

	/**
	 * Состояние операций в данном финансовом потоке
	 * Financial flow transactions state
	 * 
	 *
	 * @var string
	 */
	 public $operationStatusState = null;

}

/**
 * Ответ на запрос информации о финансовых потоках
	 * Financial flow information response
	 * 
 */


class GetFinancialFlowsListResponse
{
	
	/**
	 * 
	 *
	 * @var GetFinancialFlowsListResponseFinancialFlow
	 */
	 public $financialFlow = null;

	/**
	 * 
	 *
	 * @param GetFinancialFlowsListResponseFinancialFlow
	 *
	 * @return void
	 */
	public function addFinancialFlow(GetFinancialFlowsListResponseFinancialFlow $item)
	{
		$this->financialFlow[] = $item;
	}

}

/**
 * Получение информации об итогах по месяцам.
	 * Если данные не найдены, то size в ответе равен 0.
	 * Turnovers information request.
	 * Response element "size" is 0 if no data found.
	 * 
 */


class GetTurnoverListRequest
{
	
	/**
	 * ID пользователя в системе МОНЕТА.РУ. Если это поле не задано, то используется текущий пользователь. Необязательное поле.
	 * Structure identificator in MONETA.RU. If omitted authenticated user's structure is used. Optional.
	 * 
	 *
	 * @var long
	 */
	 public $unitId = null;

	/**
	 * Дата начала периода. Дата берется с начала указанного месяца.
	 * Period starting date. Only year and month is taken.
	 * 
	 *
	 * @var date
	 */
	 public $dateFrom = null;

	/**
	 * Дата окончания периода.
	 * В дате устанавливается конец указанного месяца.
	 * Если дата не установлена, то берется конец месяца из даты dateFrom.
	 * Period ending date.
	 * The end of given month is taken.
	 * If omitted the month of "dateFrom" is taken.
	 * 
	 *
	 * @var date
	 */
	 public $dateTo = null;

	/**
	 * Список счетов, которые учитываются в итогах по месяцам
	 * Accounts numbers for turnovers
	 * 
	 *
	 * @var long
	 */
	 public $accountIds = null;

	/**
	 * Список счетов, которые учитываются в итогах по месяцам
	 * Accounts numbers for turnovers
	 * 
	 *
	 * @param long
	 *
	 * @return void
	 */
	public function addAccountIds(long $item)
	{
		$this->accountIds[] = $item;
	}

	/**
	 * Валюта, которая учитывается в итогах по месяцам
	 * Currency of accounts for turnovers
	 * 
	 *
	 * @var string
	 */
	 public $currencyCode = null;

	/**
	 * Если groupByCurrency=true, то в ответе делается группировка по валюте
	 * If flag is switched on, turnovers will be grouped by currency
	 * 
	 *
	 * @var boolean
	 */
	 public $groupByCurrency = null;

	/**
	 * Категория операций, которая учитывается в итогах по месяцам
	 * Category of operations for turnovers
	 * 
	 *
	 * @var string
	 */
	 public $operationTypeCategory = null;

	/**
	 * Если categoryDetails=true, то в ответе делается группировка по категориям операций
	 * If flag is switched on, turnovers will be grouped by its category
	 * 
	 *
	 * @var boolean
	 */
	 public $categoryDetails = null;

	/**
	 * Дополнительные атрибуты запроса
	 * Additional request parameters
	 * 
	 *
	 * @var KeyValueAttribute
	 */
	 public $attribute = null;

	/**
	 * Дополнительные атрибуты запроса
	 * Additional request parameters
	 * 
	 *
	 * @param KeyValueAttribute
	 *
	 * @return void
	 */
	public function addAttribute(KeyValueAttribute $item)
	{
		$this->attribute[] = $item;
	}

}

/**
 * 
 */


class GetTurnoverListResponseTurnover
{
	
	/**
	 * Дата
	 * Date
	 * 
	 *
	 * @var date
	 */
	 public $date = null;

	/**
	 * Счет
	 * Account
	 * 
	 *
	 * @var string
	 */
	 public $account = null;

	/**
	 * Валюта
	 * Currency
	 * 
	 *
	 * @var string
	 */
	 public $currency = null;

	/**
	 * Категория операций (возвращается, если в запросе categoryDetails=true)
	 * Transactions category (if categoryDetails=true in request)
	 * 
	 *
	 * @var string
	 */
	 public $operationTypeCategory = null;

	/**
	 * Приход. Сумма
	 * Income. Amount
	 * 
	 *
	 * @var decimal
	 */
	 public $incomeAmount = null;

	/**
	 * Приход. Комиссия
	 * Income. Commission
	 * 
	 *
	 * @var decimal
	 */
	 public $incomeCommission = null;

	/**
	 * Приход. Количество
	 * Income. Qty
	 * 
	 *
	 * @var long
	 */
	 public $incomeTransactionsCount = null;

	/**
	 * Расход. Сумма
	 * Expenses. Amount
	 * 
	 *
	 * @var decimal
	 */
	 public $expenseAmount = null;

	/**
	 * Расход. В том числе комиссия
	 * Expenses. Including commission
	 * 
	 *
	 * @var decimal
	 */
	 public $expensesIncludingCommission = null;

	/**
	 * Расход. Дополнительная комиссия
	 * Expenses. Extra commission
	 * 
	 *
	 * @var decimal
	 */
	 public $expensesExtraCommission = null;

	/**
	 * Расход. Количество
	 * Expenses. Qty
	 * 
	 *
	 * @var long
	 */
	 public $expenseTransactionsCount = null;

	/**
	 * Итого
	 * Total
	 * 
	 *
	 * @var decimal
	 */
	 public $total = null;

	/**
	 * Входящий остаток
	 * Opening balance
	 * 
	 *
	 * @var decimal
	 */
	 public $openingBalance = null;

	/**
	 * Исходящий остаток
	 * Closing balance
	 * 
	 *
	 * @var decimal
	 */
	 public $closingBalance = null;

}

/**
 * Ответ на запрос информации об итогах по месяцам
	 * Turnovers information response
	 * 
 */


class GetTurnoverListResponse
{
	
	/**
	 * Если groupByCurrency=true, то в ответе делается группировка по валюте
	 * If flag is switched on, turnovers will be grouped by currency
	 * 
	 *
	 * @var boolean
	 */
	 public $groupByCurrency = null;

	/**
	 * 
	 *
	 * @var GetTurnoverListResponseTurnover
	 */
	 public $turnover = null;

	/**
	 * 
	 *
	 * @param GetTurnoverListResponseTurnover
	 *
	 * @return void
	 */
	public function addTurnover(GetTurnoverListResponseTurnover $item)
	{
		$this->turnover[] = $item;
	}

}

/**
 * Ответ на запрос FindProfileInfoByAccountIdRequest.
	 * Profile information by account number searching response.
	 * 
 */


class FindProfileInfoByAccountIdResponse
{
	
	/**
	 * Номер счета пользователя в системе МОНЕТА.РУ
	 * Account number in MONETA.RU
	 * 
	 *
	 * @var long
	 */
	 public $accountId = null;

	/**
	 * Валюта счета
	 * Currency of account
	 * 
	 *
	 * @var string
	 */
	 public $currency = null;

	/**
	 * Данные пользователя в системе МОНЕТА.РУ
	 * User profile information in MONETA.RU
	 * 
	 *
	 * @var Profile
	 */
	 public $profile = null;

}

/**
 * Запрос на создание пользователя в системе МОНЕТА.РУ.
	 * New user registration request.
	 * 
 */


class CreateProfileRequest
{
	
	/**
	 * ID родительского пользователя в системе МОНЕТА.РУ, к которому будет принадлежать
	 * создаваемый пользователь. Необязательное поле. Если поле не задано,
	 * то пользователь будет принадлежать тому пользователю, от имени
	 * которого работает web service.
	 * Structure ID in MONETA.RU.
	 * If ommited then authenticated user's structure ID is used.
	 * Optional.
	 * 
	 *
	 * @var long
	 */
	 public $unitId = null;

	/**
	 * Тип пользователя - "client" или "organization"
	 * Profile type. See also ProfileType description.
	 * 
	 *
	 * @var string
	 */
	 public $profileType = null;

	/**
	 * Данные создаваемого пользователя. Данные представлены в виде "ключ-значение".
	 * Ключи данных зависят от типа пользователя (ProfileType)
	 * User profile information in key-value pairs list.
	 * Supported keys depend on ProfileType.
	 * 
	 *
	 * @var Profile
	 */
	 public $profile = null;

}

/**
 * Запрос на редактирование данных пользователя в системе МОНЕТА.РУ.
	 * Profile information modification request.
	 * 
 */


class EditProfileRequest
{
	
	/**
	 * ID пользователя в системе МОНЕТА.РУ, данные которого надо отредактировать.
	 * Structure ID of profile for modification.
	 * 
	 *
	 * @var long
	 */
	 public $unitId = null;

	/**
	 * Данные редактируемого пользователя. Данные представлены в виде "ключ-значение".
	 * Ключи данных зависят от типа редактируемого пользователя (client или organization)
	 * User profile information in key-value pairs list.
	 * Supported keys depend on ProfileType.
	 * 
	 *
	 * @var Profile
	 */
	 public $profile = null;

	/**
	 * ID структуры, куда необходимо перенести данного пользователя.
	 * К указанной структуре должен быть доступ, а также действующий договор должен разрешать создание пользователя с нужным типом (client или organization)
	 * Structure ID of new parent for current profile.
	 * An access to specified StructureID has to be granted, and destination's contract has to allow descending profiles.
	 * 
	 *
	 * @var long
	 */
	 public $parentId = null;

}

/**
 * Ответ, который приходит на запрос EditProfileRequest.
	 * В ответе нет никаких данных.
	 * Если в процессе сохранения пользователя произошла ошибка, то возникнет Exception.
	 * Если Exception не возник - значит пользователь гарантированно сохранен.
	 * Profile modification response.
	 * Response contains no data unless error has occured while saving information
	 * and Exception returned as a result.
	 * 
 */


class EditProfileResponse
{
	
}

/**
 * Запрос на получение данных пользователя по ID пользователя.
	 * Если данные не найдены, возникает Exception.
	 * Request for profile information by structure ID.
	 * Exception is thrown if no data found.
	 * 
 */


class GetProfileInfoRequest extends Entity
{
	
	/**
	 * ID пользователя в системе МОНЕТА.РУ.
	 * Если это поле не задано, то используется текущий пользователь.
	 * Необязательное поле.
	 * Structure ID.
	 * If omitted authenticated user's structure is used.
	 * Optional.
	 * 
	 *
	 * @var long
	 */
	 public $unitId = null;

}

/**
 * Ответ на запрос GetProfileInfoRequest.
	 * Profile information by structure ID searching response.
	 * 
 */


class GetProfileInfoResponse extends Profile
{
	
}

/**
 * Фильтр, по которому ищем данные
	 * Searching filter
	 * 
 */


class FindProfileInfoRequestFilter
{
	
	/**
	 * ID пользователя в системе МОНЕТА.РУ. Необязательное поле. ID пользователя "от которого"
	 * начинается поиск. Если это поле не задано, то ищем пользователей, начиная
	 * от идентифицированного пользователя.
	 * Structure ID of root where searching starts from.
	 * If ommited then authenticated user's structure ID is used.
	 * Optional.
	 * 
	 *
	 * @var long
	 */
	 public $unitId = null;

	/**
	 * Имя, по которому происходит поиск. Необязательное поле. Если поле задано,
	 * то оно должно быть не меньше 2-х символов.
	 * Поиск происходит по прямому совпадению. Для задания маски
	 * можно указать спец-символы - "*" или "?".
	 * Для пользователей с типом "organization" поиск происходит по
	 * полю "organization_name". Для пользователей с типом "client" -
	 * по общему полю "last_name first_name middle_initial_name".
	 * То есть, если нужно найти пользователя "Иванов Андрей Сергеевич",
	 * то следует ввести имя для поиска именно так. Если нужно найти всех
	 * пользователей с фамилией "Иванов", то запрос должен быть "Иванов*".
	 * Если нужно найти всех пользователей с именем "Андрей", то запрос
	 * должен быть "*Андрей*".
	 * Name to search for. Optional.
	 * If specified must be not shorter than 2 symbols.
	 * Wildcards "*" and "?" may be used.
	 * For "organization" profiles "organization_name" is matched.
	 * For "client" profiles "last_name first_name middle_initial_name" is matched.
	 * 
	 *
	 * @var string
	 */
	 public $name = null;

	/**
	 * Email, по которому происходит поиск. Необязательное поле. Если поле задано,
	 * то оно должно быть не меньше 2-х символов.
	 * Поиск происходит по прямому совпадению. Для задания маски
	 * можно указать спец-символы - "*" или "?".
	 * Email to search for. Optional.
	 * If specified must be not shorted than 2 symbols.
	 * Wildcards "*" and "?" may be used.
	 * 
	 *
	 * @var string
	 */
	 public $email = null;

	/**
	 * Возвращаются пользователи у которых есть счета с балансом
	 * большим или равным указанному значению.
	 * Необязательное поле.
	 * Only profiles with greater or equal account's balance are returned.
	 * Optional.
	 * 
	 *
	 * @var decimal
	 */
	 public $accountBalanceFrom = null;

	/**
	 * Возвращаются пользователи у которых есть счета с балансом
	 * меньшим или равным указанному значению.
	 * Необязательное поле.
	 * Only profiles with less or equal account's balance are returned.
	 * Optional.
	 * 
	 *
	 * @var decimal
	 */
	 public $accountBalanceTo = null;

	/**
	 * При указании границ баланса в поиске можно уточнить валюту счета.
	 * Необязательное поле.
	 * If balance limits are specified only accounts with given currency will be analysed.
	 * Optional.
	 * 
	 *
	 * @var string
	 */
	 public $accountCurrencyCode = null;

}

/**
 * Поиск пользователя в системе МОНЕТА.РУ по заданному фильтру.
	 * В результате возвратится список пользователей, разбитый на страницы
	 * Profile searching by filter parameters.
	 * Result contains paged profile list.
	 * 
 */


class FindProfileInfoRequest extends Entity
{
	
	/**
	 * Настройки страницы данных. Необязательное поле.
	 * Paging settings. Optional.
	 * 
	 *
	 * @var Pager
	 */
	 public $pager = null;

	/**
	 * Фильтр, по которому ищем данные
	 * Searching filter
	 * 
	 *
	 * @var FindProfileInfoRequestFilter
	 */
	 public $filter = null;

}

/**
 * Ответ, который приходит на запрос FindProfileInfoRequest.
	 * Данные в ответе разбиты по страницам.
	 * Если данные не найдены, то size в ответе равен 0.
	 * Profile searching response.
	 * Result is paged.
	 * Response element "size" is 0 if no data found.
	 * 
 */


class FindProfileInfoResponse
{
	
	/**
	 * Количество пользователей, возвращаемых в результате запроса.
	 * Profiles per page.
	 * 
	 *
	 * @var long
	 */
	 public $pageSize = null;

	/**
	 * Номер текущей страницы. Нумерация начинается с 1
	 * Current page number starting from 1.
	 * 
	 *
	 * @var long
	 */
	 public $pageNumber = null;

	/**
	 * Сколько всего страниц с пользователями возможно по данному
	 * запросу
	 * Total count of pages.
	 * 
	 *
	 * @var long
	 */
	 public $pagesCount = null;

	/**
	 * Размер текущей страницы. Он всегда <= pageSize. На последней
	 * странице может быть < pageSize
	 * Profiles count in current page.
	 * 
	 *
	 * @var long
	 */
	 public $size = null;

	/**
	 * Общее количество пользователей, которое можно получить в данной
	 * выборке
	 * Total profiles count matched by searching filter.
	 * 
	 *
	 * @var long
	 */
	 public $totalSize = null;

	/**
	 * Список пользователей
	 * Profile list
	 * 
	 *
	 * @var Profile
	 */
	 public $profile = null;

	/**
	 * Список пользователей
	 * Profile list
	 * 
	 *
	 * @param Profile
	 *
	 * @return void
	 */
	public function addProfile(Profile $item)
	{
		$this->profile[] = $item;
	}

}

/**
 * Запрос на получение данных договора по ID пользователя. Если данные не найдены, возвращается пустой список.
	 * Request for contract information by structure ID. Empty list if no data found.
	 * 
 */


class FindContractsRequest extends Entity
{
	
	/**
	 * ID пользователя в системе МОНЕТА.РУ. Если это поле не задано, то используется текущий пользователь. Необязательное поле.
	 * Structure ID. If omitted authenticated user's structure is used. Optional.
	 * 
	 *
	 * @var long
	 */
	 public $unitId = null;

}

/**
 * Ответ на запрос FindContractsRequest.
	 * Contract information by structure ID searching response.
	 * 
 */


class FindContractsResponse
{
	
	/**
	 * 
	 *
	 * @var Contract
	 */
	 public $contract = null;

	/**
	 * 
	 *
	 * @param Contract
	 *
	 * @return void
	 */
	public function addContract(Contract $item)
	{
		$this->contract[] = $item;
	}

}

/**
 * Запрос на получение банковских реквизитов по ID пользователя. Если данные не найдены, возвращается пустой список.
	 * Request for bank account details by structure ID. Empty list if no data found.
	 * 
 */


class FindBankAccountsRequest extends Entity
{
	
	/**
	 * ID пользователя в системе МОНЕТА.РУ. Если это поле не задано, то используется текущий пользователь. Необязательное поле.
	 * Structure ID. If omitted authenticated user's structure is used. Optional.
	 * 
	 *
	 * @var long
	 */
	 public $unitId = null;

}

/**
 * Ответ на запрос FindBankAccountsRequest.
	 * Bank account details by structure ID searching response.
	 * 
 */


class FindBankAccountsResponse
{
	
	/**
	 * 
	 *
	 * @var BankAccount
	 */
	 public $bankAccount = null;

	/**
	 * 
	 *
	 * @param BankAccount
	 *
	 * @return void
	 */
	public function addBankAccount(BankAccount $item)
	{
		$this->bankAccount[] = $item;
	}

}

/**
 * Запрос на получение юридических реквизитов по ID пользователя. Если данные не найдены, возвращается пустой список.
	 * Request for legal information by structure ID. Empty list if no data found.
	 * 
 */


class FindLegalInformationRequest extends Entity
{
	
	/**
	 * ID пользователя в системе МОНЕТА.РУ. Если это поле не задано, то используется текущий пользователь. Необязательное поле.
	 * Structure ID. If omitted authenticated user's structure is used. Optional.
	 * 
	 *
	 * @var long
	 */
	 public $unitId = null;

}

/**
 * Ответ на запрос FindLegalInformationRequest.
	 * Legal information by structure ID searching response.
	 * 
 */


class FindLegalInformationResponse
{
	
	/**
	 * 
	 *
	 * @var LegalInformation
	 */
	 public $legalInformation = null;

	/**
	 * 
	 *
	 * @param LegalInformation
	 *
	 * @return void
	 */
	public function addLegalInformation(LegalInformation $item)
	{
		$this->legalInformation[] = $item;
	}

}

/**
 * Запрос на получение бинарных данных, ассоциированных с указанным документом.
	 * Request for binary data associated with given document.
	 * 
 */


class FindProfileDocumentFilesRequest
{
	
	/**
	 * 
	 *
	 * @var long
	 */
	 public $documentId = null;

}

/**
 * Ответ, содержащий бинарные данные, ассоциированные с указанным в запросе документом.
	 * Response containing binary data associated with document given in request.
	 * 
 */


class FindProfileDocumentFilesResponse
{
	
	/**
	 * 
	 *
	 * @var File
	 */
	 public $file = null;

	/**
	 * 
	 *
	 * @param File
	 *
	 * @return void
	 */
	public function addFile(File $item)
	{
		$this->file[] = $item;
	}

}

/**
 * Запрос на создание/редактирование файла документа
	 * Request for file adding/modification.
	 * 
 */


class UploadProfileDocumentFileRequest
{
	
	/**
	 * Если указано поле fileId - файл редактируется, иначе создается новый файл.
	 * Поле approved в данном запросе не используется.
	 * Если не указан mimeType, но в запросе есть имя файла (поле title), то mimeType будет вычисляться по расширению файла
	 * Specify "fileId" to modify file, omit "fileId" to add new file.
	 * Approved is not used.
	 * If "mimeType" omitted and "title" is specified, "mimeType" will be resolved by filename extension.
	 * 
	 *
	 * @var File
	 */
	 public $file = null;

}

/**
 * Ответ на запрос создания/редактирования файла документа
	 * Если в процессе сохранения файла произошла ошибка, то возникнет Exception.
	 * Если Exception не возник - значит файл гарантированно сохранен.
	 * Response for file adding/modification.
	 * Response contains no data unless some error has occured while modification.
	 * If reponse has no Exception then file is uploaded successfully.
	 * 
 */


class UploadProfileDocumentFileResponse
{
	
}

/**
 * Запрос на получение документов пользователя.
	 * Profile's documents retrieval request.
	 * 
 */


class FindProfileDocumentsRequest
{
	
	/**
	 * ID пользователя, документы которого запрашиваются.
	 * Structure ID containing documents.
	 * 
	 *
	 * @var long
	 */
	 public $unitId = null;

}

/**
 * Ответ на запрос FindProfileDocumentsRequest.
	 * Profile's documents retrieval response.
	 * 
 */


class FindProfileDocumentsResponse
{
	
	/**
	 * Список найденных документов. Если документов нет - список пустой.
	 * Found documents list. Empty if no documents are found.
	 * 
	 *
	 * @var Document
	 */
	 public $document = null;

	/**
	 * Список найденных документов. Если документов нет - список пустой.
	 * Found documents list. Empty if no documents are found.
	 * 
	 *
	 * @param Document
	 *
	 * @return void
	 */
	public function addDocument(Document $item)
	{
		$this->document[] = $item;
	}

}

/**
 * Запрос на создание документа пользователя.
	 * Profile's document registration request.
	 * 
 */


class CreateProfileDocumentRequest extends Document
{
	
	/**
	 * Пользователь, которому будет принадлежать данный документ.
	 * Если это поле не задано, то документ создается для текущего пользователя.
	 * Необязательное поле.
	 * Structure element, where the document belongs to.
	 * If omitted authenticated user's structure is used.
	 * Optional.
	 * 
	 *
	 * @var long
	 */
	 public $unitId = null;

}

/**
 * Ответ на запрос создания документа в профиле.
	 * Profile's document registration response.
	 * 
 */


class CreateProfileDocumentResponse
{
	
	/**
	 * Идентификатор документа в системе МОНЕТА.РУ
	 * Document identificator in MONETA.RU
	 * 
	 *
	 * @var long
	 */
	 public $id = null;

}

/**
 * Запрос на редактирование документа пользователя.
	 * Profile's document modification request.
	 * 
 */


class EditProfileDocumentRequest extends Document
{
	
	/**
	 * Пользователь, которому принадлежит данный документ.
	 * Если это поле не задано, то документ ищется для текущего пользователя.
	 * Необязательное поле.
	 * Structure element, where the document belongs to.
	 * If omitted authenticated user's structure is used.
	 * Optional.
	 * 
	 *
	 * @var long
	 */
	 public $unitId = null;

}

/**
 * Ответ, который приходит на запрос EditProfileDocumentRequest.
	 * В ответе нет никаких данных.
	 * Если в процессе сохранения документа произошла ошибка, то возникнет Exception.
	 * Если Exception не возник - значит документ гарантированно сохранен.
	 * Document modification response.
	 * Response contains no data unless some error has occured while modification.
	 * If reponse has no Exception then document is modified successfully.
	 * 
 */


class EditProfileDocumentResponse
{
	
}

/**
 * Запрос на получение списка пользователей, которые имеют делегированный доступ к указанному счету.
	 * Request to find delegated users for specified account ID.
	 * 
 */


class FindAccountRelationsRequest
{
	
	/**
	 * Номер счета в системе МОНЕТА.РУ.
	 * Account number.
	 * 
	 *
	 * @var long
	 */
	 public $accountId = null;

}

/**
 * Ответ на запрос FindAccountRelationsRequest.
	 * Response containing the list of delegated users.
	 * 
 */


class FindAccountRelationsResponse
{
	
	/**
	 * Список найденных пользователей, которые имеют делегированный доступ к указанному счету. Если пользователей нет - список пустой.
	 * List of found users having delegated account access. The list is empty if no users are found.
	 * 
	 *
	 * @var AccountRelation
	 */
	 public $accountRelation = null;

	/**
	 * Список найденных пользователей, которые имеют делегированный доступ к указанному счету. Если пользователей нет - список пустой.
	 * List of found users having delegated account access. The list is empty if no users are found.
	 * 
	 *
	 * @param AccountRelation
	 *
	 * @return void
	 */
	public function addAccountRelation(AccountRelation $item)
	{
		$this->accountRelation[] = $item;
	}

}

/**
 * Запрос на получение данных по делегированному доступу.
	 * Request for delegated access details.
	 * 
 */


class GetAccountRelationRequest
{
	
	/**
	 * Номер счета в системе МОНЕТА.РУ.
	 * Account number.
	 * 
	 *
	 * @var long
	 */
	 public $accountId = null;

	/**
	 * Email пользователя.
	 * User's Email.
	 * 
	 *
	 * @var string
	 */
	 public $principalEmail = null;

}

/**
 * Ответ на запрос GetAccountRelationRequest.
	 * Response containing detailed information for delegated access.
	 * 
 */


class GetAccountRelationResponse
{
	
	/**
	 * 
	 *
	 * @var AccountRelation
	 */
	 public $accountRelation = null;

}

/**
 * Запрос на сохранение делегированного доступа к счету.
	 * Request for saving detailed information of delegated access.
	 * 
 */


class SaveAccountRelationRequest extends AccountRelation
{
	
	/**
	 * Платежный пароль.
	 * Payment password for account.
	 * 
	 *
	 * @var normalizedString
	 */
	 public $paymentPassword = null;

	/**
	 * Запрос для платежного пароля
	 * Payment password challenge
	 * 
	 *
	 * @var string
	 */
	 public $paymentPasswordChallenge = null;

}

/**
 * Ответ, который приходит на запрос SaveAccountRelationRequest.
	 * В ответе нет никаких данных.
	 * Если в процессе сохранения счета произошла ошибка, то возникнет Exception.
	 * Если Exception не возник - значит делегированный доступ гарантированно сохранен.
	 * Save account relation response.
	 * Response contains no data unless some error has occured while modification.
	 * If reponse has no Exception then delegated access is modified successfully.
	 * 
 */


class SaveAccountRelationResponse
{
	
}

/**
 * Запрос на удаление делегированного доступа к счету.
	 * Request for deletion of access delegation.
	 * 
 */


class DeleteAccountRelationRequest
{
	
	/**
	 * Номер счета в системе МОНЕТА.РУ.
	 * Account number.
	 * 
	 *
	 * @var long
	 */
	 public $accountId = null;

	/**
	 * Email пользователя.
	 * User's Email.
	 * 
	 *
	 * @var string
	 */
	 public $principalEmail = null;

}

/**
 * Ответ, который приходит на запрос DeleteAccountRelationRequest.
	 * В ответе нет никаких данных.
	 * Если в процессе сохранения счета произошла ошибка, то возникнет Exception.
	 * Если Exception не возник - значит делегированный доступ гарантированно удален.
	 * Delete account relation response.
	 * Response contains no data unless some error has occured while modification.
	 * If reponse has no Exception then delegated access is deleted successfully.
	 * 
 */


class DeleteAccountRelationResponse
{
	
}
?>